{"file_contents":{"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema } from \"@shared/schema\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { registerAdminRoutes } from \"./adminRoutes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n  registerAdminRoutes(app);\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get all categories\n  app.get(\"/api/categories\", async (_req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Get all products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const categoryId = req.query.categoryId as string | undefined;\n\n      if (categoryId) {\n        const products = await storage.getProductsByCategoryId(categoryId);\n        res.json(products);\n      } else {\n        const products = await storage.getAllProducts();\n        res.json(products);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get a single product by ID\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        res.status(404).json({ message: \"Product not found\" });\n        return;\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Create an order\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const result = insertOrderSchema.safeParse(req.body);\n      if (!result.success) {\n        res.status(400).json({ message: \"Invalid order data\", errors: result.error });\n        return;\n      }\n\n      const order = await storage.createOrder(result.data);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Get order by ID\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrderById(req.params.id);\n      if (!order) {\n        res.status(404).json({ message: \"Order not found\" });\n        return;\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  // Get all chefs\n  app.get(\"/api/chefs\", async (_req, res) => {\n    try {\n      const chefs = await storage.getChefs();\n      res.json(chefs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chefs\" });\n    }\n  });\n\n  // Get chefs by category ID\n  app.get(\"/api/chefs/:categoryId\", (req, res) => {\n    const { categoryId } = req.params;\n    const chefs = storage.getChefsByCategory(categoryId);\n    res.json(chefs);\n  });\n\n  // Calculate delivery fee based on distance\n  app.post(\"/api/calculate-delivery\", async (req, res) => {\n    try {\n      const { latitude, longitude } = req.body;\n      \n      if (!latitude || !longitude) {\n        res.status(400).json({ message: \"Latitude and longitude are required\" });\n        return;\n      }\n\n      // Store location (you can change this in shared/deliveryUtils.ts)\n      const STORE_LAT = 28.6139;\n      const STORE_LON = 77.2090;\n\n      // Calculate distance using Haversine formula\n      const R = 6371; // Earth's radius in km\n      const dLat = toRad(latitude - STORE_LAT);\n      const dLon = toRad(longitude - STORE_LON);\n      \n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(STORE_LAT)) *\n        Math.cos(toRad(latitude)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n      \n      const c = 2 * Math.asin(Math.sqrt(a));\n      const distance = parseFloat((R * c).toFixed(2));\n\n      // Calculate delivery fee\n      const baseFee = 20;\n      let deliveryFee = baseFee;\n      \n      if (distance > 2) {\n        deliveryFee = baseFee + Math.ceil(distance - 2) * 10;\n      }\n\n      res.json({\n        distance,\n        deliveryFee,\n        estimatedTime: Math.ceil(distance * 2 + 15)\n      });\n    } catch (error) {\n      console.error(\"Error calculating delivery:\", error);\n      res.status(500).json({ message: \"Failed to calculate delivery\" });\n    }\n  });\n\n  function toRad(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":4829},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ChefListDrawer.tsx":{"content":"\nimport { X, Star, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Chef, Category } from \"@shared/schema\";\n\ninterface ChefListDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  category: Category | null;\n  chefs: Chef[];\n  onChefClick: (chef: Chef) => void;\n}\n\nexport default function ChefListDrawer({ \n  isOpen, \n  onClose, \n  category,\n  chefs,\n  onChefClick\n}: ChefListDrawerProps) {\n  if (!isOpen || !category) return null;\n\n  const categoryChefs = chefs.filter(chef => chef.categoryId === category.id);\n\n  return (\n    <>\n      <div\n        className=\"fixed inset-0 bg-black/50 z-50 transition-opacity\"\n        onClick={onClose}\n        data-testid=\"chef-list-backdrop\"\n      />\n\n      <div\n        className=\"fixed top-0 left-0 h-full w-full sm:w-[500px] bg-background z-50 shadow-lg transform transition-transform duration-300 ease-in-out\"\n        data-testid=\"chef-list-drawer\"\n      >\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <div>\n              <h2 className=\"text-xl font-bold text-primary\" data-testid=\"text-chef-list-title\">\n                {category.name}\n              </h2>\n              <p className=\"text-sm text-muted-foreground\">Choose your chef or restaurant</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-chef-list\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-4 space-y-4\">\n              {categoryChefs.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-chefs\">\n                  No chefs or restaurants available in this category\n                </p>\n              ) : (\n                categoryChefs.map((chef) => (\n                  <div\n                    key={chef.id}\n                    className=\"border rounded-lg p-4 cursor-pointer hover:shadow-md transition-shadow hover:border-primary\"\n                    onClick={() => {\n                      onChefClick(chef);\n                      onClose();\n                    }}\n                    data-testid={`chef-card-${chef.id}`}\n                  >\n                    <div className=\"flex gap-4\">\n                      <img\n                        src={chef.image}\n                        alt={chef.name}\n                        className=\"w-20 h-20 rounded-lg object-cover\"\n                        data-testid={`img-chef-${chef.id}`}\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-chef-name-${chef.id}`}>\n                              {chef.name}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-chef-description-${chef.id}`}>\n                              {chef.description}\n                            </p>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"flex items-center gap-1\">\n                                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                <span className=\"text-sm font-medium\">{chef.rating}</span>\n                              </div>\n                              <span className=\"text-xs text-muted-foreground\">\n                                ({chef.reviewCount} reviews)\n                              </span>\n                            </div>\n                          </div>\n                          <ChevronRight className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4277},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/Header\";\nimport Hero from \"@/components/Hero\";\nimport CategoryCard from \"@/components/CategoryCard\";\nimport ProductCard from \"@/components/ProductCard\";\nimport CartSidebar from \"@/components/CartSidebar\";\nimport CheckoutDialog from \"@/components/CheckoutDialog\";\nimport MenuDrawer from \"@/components/MenuDrawer\";\nimport CategoryMenuDrawer from \"@/components/CategoryMenuDrawer\";\nimport ChefListDrawer from \"@/components/ChefListDrawer\";\nimport Footer from \"@/components/Footer\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { UtensilsCrossed, ChefHat, Hotel } from \"lucide-react\";\nimport type { Category, Chef, Product } from \"@shared/schema\";\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\nconst iconMap: Record<string, React.ReactNode> = {\n  UtensilsCrossed: <UtensilsCrossed className=\"h-6 w-6 text-primary\" />,\n  ChefHat: <ChefHat className=\"h-6 w-6 text-primary\" />,\n  Hotel: <Hotel className=\"h-6 w-6 text-primary\" />,\n};\n\nexport default function Home() {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isChefListOpen, setIsChefListOpen] = useState(false);\n  const [isCategoryMenuOpen, setIsCategoryMenuOpen] = useState(false);\n  const [selectedCategoryForChefList, setSelectedCategoryForChefList] = useState<Category | null>(null);\n  const [selectedCategoryForMenu, setSelectedCategoryForMenu] = useState<Category | null>(null);\n  const [selectedChefForMenu, setSelectedChefForMenu] = useState<Chef | null>(null);\n  const [selectedCategoryTab, setSelectedCategoryTab] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n\n  const handleCategoryTabChange = (value: string) => {\n    setSelectedCategoryTab(value);\n    // Close drawers when changing tabs\n    setIsChefListOpen(false);\n    setIsCategoryMenuOpen(false);\n    // Scroll to products section\n    const productsSection = document.getElementById(\"products-section\");\n    if (productsSection) {\n      productsSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: chefs = [], isLoading: chefsLoading } = useQuery<Chef[]>({\n    queryKey: [\"/api/chefs\"],\n  });\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const handleAddToCart = (productId: string, productName: string, price: number, image: string, quantity: number) => {\n    if (quantity === 0) {\n      setCartItems(items => items.filter(item => item.id !== productId));\n    } else {\n      setCartItems(items => {\n        const existing = items.find(item => item.id === productId);\n        if (existing) {\n          return items.map(item =>\n            item.id === productId ? { ...item, quantity } : item\n          );\n        }\n        return [...items, { id: productId, name: productName, price, quantity, image }];\n      });\n    }\n  };\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      setCartItems(items => items.filter(item => item.id !== id));\n    } else {\n      setCartItems(items =>\n        items.map(item => item.id === id ? { ...item, quantity } : item)\n      );\n    }\n  };\n\n  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const deliveryFee = subtotal > 0 ? 40 : 0;\n  const total = subtotal + deliveryFee;\n\n  const handleCheckout = () => {\n    setIsCartOpen(false);\n    setIsCheckoutOpen(true);\n  };\n\n  const handleOrderSuccess = () => {\n    setCartItems([]);\n    setIsCheckoutOpen(false);\n  };\n\n  const handleCategoryClick = (categoryId: string) => {\n    const category = categories.find(c => c.id === categoryId);\n    if (category) {\n      // Switch to the category tab\n      setSelectedCategoryTab(categoryId);\n      // Close menu drawer\n      setIsMenuOpen(false);\n      // Scroll to products section\n      setTimeout(() => {\n        const productsSection = document.getElementById(\"products-section\");\n        if (productsSection) {\n          productsSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        }\n      }, 100);\n    }\n  };\n\n  const handleChefClick = (chef: Chef) => {\n    setSelectedChefForMenu(chef);\n    setSelectedCategoryForMenu(selectedCategoryForChefList);\n    setIsCategoryMenuOpen(true);\n  };\n\n  const handleBrowseCategory = (categoryId: string) => {\n    const category = categories.find(c => c.id === categoryId);\n    if (category) {\n      // Switch to the category tab\n      setSelectedCategoryTab(categoryId);\n      // Close menu drawer\n      setIsMenuOpen(false);\n      // Scroll to products section\n      setTimeout(() => {\n        const productsSection = document.getElementById(\"products-section\");\n        if (productsSection) {\n          productsSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        }\n      }, 100);\n    }\n  };\n\n  const filteredProducts = products.filter(product => {\n    const searchLower = searchQuery.trim().toLowerCase();\n    const matchesSearch = !searchLower || \n      product.name.toLowerCase().includes(searchLower) ||\n      product.description.toLowerCase().includes(searchLower);\n\n    const matchesCategory = selectedCategoryTab === \"all\" || product.categoryId === selectedCategoryTab;\n\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header\n        cartItemCount={totalItems}\n        onCartClick={() => setIsCartOpen(true)}\n        onMenuClick={() => setIsMenuOpen(true)}\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n      />\n\n      <main className=\"flex-1\">\n        <Hero />\n\n        <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          {selectedCategoryTab === \"all\" && (\n            <>\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\" data-testid=\"text-categories-heading\">\n                  Browse by Category\n                </h2>\n                <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"text-categories-subheading\">\n                  Choose from our popular categories\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n                {categoriesLoading ? (\n                  <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                    Loading categories...\n                  </div>\n                ) : (\n                  categories.map((category) => (\n                    <CategoryCard\n                      key={category.id}\n                      id={`category-${category.id}`}\n                      title={category.name}\n                      description={category.description}\n                      itemCount={category.itemCount}\n                      image={category.image}\n                      icon={iconMap[category.iconName]}\n                      onBrowse={() => handleBrowseCategory(category.id)}\n                    />\n                  ))\n                )}\n              </div>\n            </>\n          )}\n\n          <div id=\"products-section\">\n            {selectedCategoryTab === \"all\" ? (\n              <>\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\" data-testid=\"text-popular-heading\">\n                    Popular Items\n                  </h2>\n                  <p className=\"text-lg text-muted-foreground\" data-testid=\"text-popular-subheading\">\n                    Most loved by our customers\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {productsLoading ? (\n                    <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                      Loading products...\n                    </div>\n                  ) : filteredProducts.length === 0 ? (\n                    <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                      No products found matching \"{searchQuery}\"\n                    </div>\n                  ) : (\n                    filteredProducts.map((product) => (\n                      <ProductCard\n                        key={product.id}\n                        id={product.id}\n                        name={product.name}\n                        description={product.description}\n                        price={product.price}\n                        image={product.image}\n                        rating={parseFloat(product.rating)}\n                        reviewCount={product.reviewCount}\n                        isVeg={product.isVeg}\n                        isCustomizable={product.isCustomizable}\n                        onAddToCart={(quantity) =>\n                          handleAddToCart(product.id, product.name, product.price, product.image, quantity)\n                        }\n                      />\n                    ))\n                  )}\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\" data-testid=\"text-popular-heading\">\n                    {categories.find(c => c.id === selectedCategoryTab)?.name || 'Restaurants & Chefs'}\n                  </h2>\n                  <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"text-popular-subheading\">\n                    Select a restaurant or chef to view their menu\n                  </p>\n\n                  {/* Category tabs */}\n                  <div className=\"flex justify-center mb-6\">\n                    <div className=\"inline-flex gap-2 p-1 bg-muted rounded-lg flex-wrap\">\n                      <Button\n                        variant={selectedCategoryTab === \"all\" ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        onClick={() => handleCategoryTabChange(\"all\")}\n                        data-testid=\"tab-all\"\n                      >\n                        All\n                      </Button>\n                      {categories.map((category) => (\n                        <Button\n                          key={category.id}\n                          variant={selectedCategoryTab === category.id ? \"default\" : \"ghost\"}\n                          size=\"sm\"\n                          onClick={() => handleCategoryTabChange(category.id)}\n                          data-testid={`tab-${category.id}`}\n                        >\n                          {category.name}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                  {chefsLoading ? (\n                    <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                      Loading chefs...\n                    </div>\n                  ) : (\n                    chefs\n                      .filter(chef => chef.categoryId === selectedCategoryTab)\n                      .map((chef) => (\n                        <div\n                          key={chef.id}\n                          className=\"border rounded-lg overflow-hidden cursor-pointer hover:shadow-lg transition-all hover:border-primary\"\n                          onClick={() => {\n                            const category = categories.find(c => c.id === selectedCategoryTab);\n                            setSelectedChefForMenu(chef);\n                            setSelectedCategoryForMenu(category || null);\n                            setIsCategoryMenuOpen(true);\n                          }}\n                          data-testid={`chef-card-${chef.id}`}\n                        >\n                          <div className=\"relative h-48 overflow-hidden\">\n                            <img\n                              src={chef.image}\n                              alt={chef.name}\n                              className=\"w-full h-full object-cover transition-transform duration-300 hover:scale-105\"\n                            />\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent\" />\n                          </div>\n\n                          <div className=\"p-4\">\n                            <h3 className=\"font-bold text-xl mb-2\" data-testid={`text-chef-name-${chef.id}`}>\n                              {chef.name}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-chef-description-${chef.id}`}>\n                              {chef.description}\n                            </p>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"flex items-center gap-1\">\n                                  <svg className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" viewBox=\"0 0 20 20\">\n                                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                                  </svg>\n                                  <span className=\"text-sm font-medium\">{chef.rating}</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  ({chef.reviewCount} reviews)\n                                </span>\n                              </div>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"gap-1\">\n                                View Menu\n                                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                                </svg>\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n\n      <MenuDrawer\n        isOpen={isMenuOpen}\n        onClose={() => setIsMenuOpen(false)}\n        categories={categories}\n        onCategoryClick={handleCategoryClick}\n        selectedCategoryTab={selectedCategoryTab}\n        onCategoryTabChange={handleCategoryTabChange}\n      />\n\n      <ChefListDrawer\n        isOpen={isChefListOpen}\n        onClose={() => setIsChefListOpen(false)}\n        category={selectedCategoryForChefList}\n        chefs={chefs}\n        onChefClick={handleChefClick}\n      />\n\n      <CategoryMenuDrawer\n        isOpen={isCategoryMenuOpen}\n        onClose={() => setIsCategoryMenuOpen(false)}\n        category={selectedCategoryForMenu}\n        chef={selectedChefForMenu}\n        products={products}\n        cartItems={cartItems}\n        onAddToCart={handleAddToCart}\n        onProceedToCart={() => setIsCartOpen(true)}\n      />\n\n      <CartSidebar\n        isOpen={isCartOpen}\n        onClose={() => setIsCartOpen(false)}\n        items={cartItems}\n        onUpdateQuantity={handleUpdateQuantity}\n        onCheckout={handleCheckout}\n      />\n\n      <CheckoutDialog\n        isOpen={isCheckoutOpen}\n        onClose={() => setIsCheckoutOpen(false)}\n        cartItems={cartItems}\n        subtotal={subtotal}\n        deliveryFee={deliveryFee}\n        total={total}\n        onOrderSuccess={handleOrderSuccess}\n      />\n    </div>\n  );\n}","size_bytes":16475},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/CartSidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { X, Plus, Minus, ShoppingBag } from \"lucide-react\";\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\ninterface CartSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  items?: CartItem[];\n  onUpdateQuantity?: (id: string, quantity: number) => void;\n  onCheckout?: () => void;\n  disableCheckout?: boolean;\n}\n\nexport default function CartSidebar({\n  isOpen,\n  onClose,\n  items = [],\n  onUpdateQuantity,\n  onCheckout,\n  disableCheckout = false,\n}: CartSidebarProps) {\n  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const deliveryFee = subtotal > 0 ? 40 : 0;\n  const total = subtotal + deliveryFee;\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div\n        className=\"fixed inset-0 bg-black/50 z-40\"\n        onClick={onClose}\n        data-testid=\"overlay-cart\"\n      />\n      \n      <div\n        className=\"fixed right-0 top-0 h-full w-full sm:w-96 bg-background border-l z-50 flex flex-col\"\n        data-testid=\"sidebar-cart\"\n      >\n        <div className=\"flex items-center justify-between gap-4 p-4 border-b flex-wrap\">\n          <div className=\"flex items-center gap-3\">\n            <ShoppingBag className=\"h-5 w-5 text-primary\" />\n            <h2 className=\"text-xl font-semibold\" data-testid=\"text-cart-title\">\n              Your Cart\n            </h2>\n            <Badge variant=\"secondary\" data-testid=\"badge-cart-items\">\n              {items.length}\n            </Badge>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            data-testid=\"button-close-cart\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {items.length === 0 ? (\n          <div className=\"flex-1 flex flex-col items-center justify-center p-8 text-center\">\n            <ShoppingBag className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-empty-cart\">\n              Your cart is empty\n            </h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-empty-cart-description\">\n              Add items to get started\n            </p>\n          </div>\n        ) : (\n          <>\n            <ScrollArea className=\"flex-1 p-4\">\n              <div className=\"space-y-4\">\n                {items.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"flex gap-3\"\n                    data-testid={`item-cart-${item.id}`}\n                  >\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className=\"w-20 h-20 object-cover rounded-md\"\n                      data-testid={`img-cart-${item.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium mb-1\" data-testid={`text-cart-item-name-${item.id}`}>\n                        {item.name}\n                      </h4>\n                      <p className=\"text-sm font-semibold text-primary mb-2\" data-testid={`text-cart-item-price-${item.id}`}>\n                        ₹{item.price}\n                      </p>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-7 w-7\"\n                          onClick={() => onUpdateQuantity?.(item.id, item.quantity - 1)}\n                          data-testid={`button-decrease-cart-${item.id}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"w-8 text-center text-sm font-medium\" data-testid={`text-cart-quantity-${item.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-7 w-7\"\n                          onClick={() => onUpdateQuantity?.(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-cart-${item.id}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            <div className=\"border-t p-4\">\n              <div className=\"space-y-3 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\" data-testid=\"text-subtotal-label\">Subtotal</span>\n                  <span className=\"font-medium\" data-testid=\"text-subtotal\">₹{subtotal}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\" data-testid=\"text-delivery-label\">Delivery Fee</span>\n                  <span className=\"font-medium\" data-testid=\"text-delivery-fee\">₹{deliveryFee}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between font-semibold\">\n                  <span data-testid=\"text-total-label\">Total</span>\n                  <span className=\"text-primary\" data-testid=\"text-total\">₹{total}</span>\n                </div>\n              </div>\n              <Button\n                size=\"lg\"\n                className=\"w-full\"\n                onClick={onCheckout}\n                disabled={disableCheckout}\n                data-testid=\"button-checkout\"\n              >\n                Proceed to Checkout\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":6089},"design_guidelines.md":{"content":"# Food Delivery Application - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach** inspired by leading food delivery platforms (Uber Eats, DoorDash, Swiggy, Zomato). This approach emphasizes visual appetite appeal, intuitive categorization, and seamless ordering flow optimized for quick decision-making and conversions.\n\n## Typography System\n- **Primary Font**: Inter or DM Sans (Google Fonts)\n- **Headings**: Bold weights (700) for category titles and section headers\n- **Body Text**: Regular (400) and Medium (500) for descriptions and pricing\n- **Scale**: text-4xl/5xl for hero headlines, text-2xl/3xl for category headers, text-lg for product names, text-base for descriptions, text-sm for metadata\n\n## Layout & Spacing System\n**Tailwind Spacing Units**: Consistently use 4, 6, 8, 12, 16, 20, 24 for margins and padding (m-4, p-6, gap-8, etc.)\n\n**Container Strategy**:\n- Full-width sections with max-w-7xl inner containers\n- Category grids: 3-4 columns on desktop, 2 on tablet, 1 on mobile\n- Product cards: 2-4 column responsive grids\n\n## Component Library\n\n### Navigation Header\n- Sticky top navigation with logo, location selector, search bar, cart icon with badge counter\n- Primary CTA: \"Sign In\" or user profile avatar\n- Mobile: Collapsible hamburger menu with category quick-access\n\n### Hero Section\n- Full-width banner (60-70vh) with appetizing food photography\n- Overlay gradient for text readability\n- Centered headline: \"Delicious Meals Delivered to Your Door\"\n- Search bar with category filters prominently placed\n- Delivery time estimate and location input\n\n### Category Divisions (Home Page Focus)\n**Three Main Category Cards** arranged horizontally (desktop) or vertically stacked (mobile):\n\n1. **Roti Section**:\n   - Card with tandoor/roti imagery\n   - Title: \"Fresh Rotis & Breads\"\n   - Quick stats: \"20+ varieties\"\n   - Browse button\n\n2. **Lunch & Dinner Section**:\n   - Card with complete meal platter imagery\n   - Title: \"Complete Meals\"\n   - Quick stats: \"50+ dishes\"\n   - Browse button\n\n3. **Hotel Section**:\n   - Card with restaurant/fine dining imagery\n   - Title: \"Restaurant Specials\"\n   - Quick stats: \"30+ partners\"\n   - Browse button\n\nEach card includes: background image with subtle overlay, icon, category name, item count, and prominent action button.\n\n### Product Cards\n- High-quality food photography (square or 4:3 aspect ratio)\n- Product name and brief description\n- Price prominently displayed\n- Customization indicator (e.g., \"Customize available\")\n- Add to cart button with quantity selector\n- Ratings and review count\n- Dietary badges (veg/non-veg indicators common in Indian food apps)\n- Quick view/hover state showing more details\n\n### Shopping Cart (Sidebar or Modal)\n- Slide-in panel from right side\n- Cart items list with thumbnails\n- Quantity adjusters (+/- buttons)\n- Item customization summary\n- Subtotal, delivery fee, taxes breakdown\n- Prominent checkout button\n- Empty cart state with illustration\n\n### Order Form\n- Step-based multi-page form or single-page with sections\n- Delivery address with map integration placeholder\n- Contact information\n- Delivery time selection (ASAP or scheduled)\n- Payment method selection\n- Order summary sidebar\n- Special instructions textarea\n\n### Footer\n- Multiple columns: About, Categories, Customer Support, Download App\n- Social media links\n- Newsletter signup with food imagery\n- Payment methods accepted icons\n- Copyright and legal links\n\n## Product Listing Pages\n\n### Category Pages (Roti, Lunch & Dinner, Hotel)\n- Breadcrumb navigation\n- Category banner with description\n- Filtering sidebar: Price range, dietary preferences, cuisine type, ratings\n- Sort options: Popular, Price (low-high), Ratings, Delivery time\n- Grid layout for product cards (responsive)\n- Load more or infinite scroll\n\n### Individual Product Page\n- Large product image gallery (3-5 images)\n- Product name and detailed description\n- Customization options (size, add-ons, spice level, etc.)\n- Ingredient list\n- Nutritional information (expandable section)\n- Customer reviews and ratings section\n- Similar products carousel\n- Sticky add-to-cart section on mobile\n\n## Interactive Elements\n\n### Buttons\n- Primary: Solid fill for main CTAs (Add to Cart, Checkout)\n- Secondary: Outlined for Browse/View More\n- Cart buttons: Icon + counter badge\n- Sizing: Large for hero CTAs, medium for product cards, small for quantity adjusters\n\n### Cards\n- Slight elevation (shadow-md)\n- Rounded corners (rounded-lg to rounded-xl)\n- Hover state: Subtle lift effect (shadow-lg transition)\n- Click area optimization for mobile\n\n### Forms\n- Floating labels or top-aligned labels\n- Input validation with inline error messages\n- Clear focus states with border emphasis\n- Auto-complete for addresses\n- Dropdown menus for selection options\n\n## Images\n\n### Hero Section\n**Large hero image**: Full-width banner showing a diverse spread of delicious Indian food - rotis, curry bowls, rice dishes, arranged appetizingly on a table with warm lighting. Should evoke hunger and comfort.\n\n### Category Cards\n- **Roti Card**: Close-up of freshly baked tandoori rotis stacked on a plate with visible texture\n- **Lunch & Dinner Card**: Complete thali or meal platter with multiple dishes\n- **Hotel Card**: Fine dining setup with elegant plating or restaurant ambiance\n\n### Product Cards\nEach food item requires high-quality, well-lit photography showing the dish in its best presentation. Consistent styling across all product images (similar backgrounds, lighting).\n\n## Responsive Behavior\n\n### Desktop (lg: 1024px+)\n- Multi-column category grid (3 columns)\n- Sidebar cart panel\n- Hover interactions on product cards\n- Mega-menu navigation with category previews\n\n### Tablet (md: 768px)\n- 2-column product grids\n- Condensed navigation\n- Modal cart instead of sidebar\n\n### Mobile (base: <768px)\n- Single column layout\n- Bottom navigation bar with Home, Categories, Cart, Profile\n- Sticky category filters\n- Full-screen cart modal\n- Simplified search with drawer\n\n## SEO Implementation Features\n\n### Technical SEO Elements\n- Semantic HTML5 structure with proper heading hierarchy\n- Meta descriptions for each category and product page\n- Open Graph tags for social sharing\n- Schema.org markup for products (Product, Offer, AggregateRating)\n- Optimized image alt texts describing dishes\n- Sitemap generation structure\n- Breadcrumb markup\n\n### Content Strategy\n- Category page descriptions with target keywords\n- Product descriptions with relevant food terminology\n- Blog section for recipes and food stories\n- FAQ section for common delivery queries\n- Location-based landing pages\n\n## Performance Considerations\n- Lazy loading for product images\n- Optimized image formats (WebP with fallbacks)\n- Infinite scroll with pagination fallback\n- Cached category data\n- Progressive web app capabilities for mobile\n\nThis design creates a visually appetizing, conversion-optimized food delivery experience that balances beautiful imagery with functional efficiency, ensuring users can quickly browse categories, customize orders, and complete purchases seamlessly across all devices.","size_bytes":7113},"shared/deliveryUtils.ts":{"content":"\n// Haversine formula to calculate distance between two coordinates in kilometers\nexport function calculateDistance(\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  \n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) *\n    Math.cos(toRad(lat2)) *\n    Math.sin(dLon / 2) *\n    Math.sin(dLon / 2);\n  \n  const c = 2 * Math.asin(Math.sqrt(a));\n  const distance = R * c;\n  \n  return parseFloat(distance.toFixed(2));\n}\n\nfunction toRad(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n// Calculate delivery fee based on distance\nexport function calculateDeliveryFee(distanceKm: number): number {\n  // Base delivery fee\n  const baseFee = 20;\n  \n  // Free delivery for orders within 2km\n  if (distanceKm <= 2) {\n    return baseFee;\n  }\n  \n  // ₹10 per km after 2km\n  const additionalFee = Math.ceil(distanceKm - 2) * 10;\n  \n  return baseFee + additionalFee;\n}\n\n// Restaurant/store default location (you can change this)\nexport const STORE_LOCATION = {\n  latitude: 28.6139, // Example: New Delhi\n  longitude: 77.2090,\n  address: \"Main Store, Connaught Place, New Delhi\"\n};\n","size_bytes":1264},"client/src/components/Footer.tsx":{"content":"import { Facebook, Instagram, Twitter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t mt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          <div>\n            <h3 className=\"text-xl font-bold text-primary mb-4\" data-testid=\"text-footer-logo\">\n              RotiHai\n            </h3>\n            <p className=\"text-sm text-muted-foreground mb-4\" data-testid=\"text-footer-description\">\n              Delicious meals delivered to your doorstep in 30 minutes or less.\n            </p>\n            <div className=\"flex gap-2\">\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-facebook\">\n                <Facebook className=\"h-5 w-5\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-instagram\">\n                <Instagram className=\"h-5 w-5\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-twitter\">\n                <Twitter className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-categories-title\">Categories</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-rotis\">Rotis & Breads</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-meals\">Lunch & Dinner</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-hotels\">Hotel Specials</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-support-title\">Customer Support</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-help\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-track\">Track Order</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-contact\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"link-faq\">FAQ</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\" data-testid=\"text-newsletter-title\">Stay Updated</h4>\n            <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-newsletter-description\">\n              Get special offers and updates\n            </p>\n            <div className=\"flex gap-2\">\n              <Input placeholder=\"Your email\" type=\"email\" data-testid=\"input-newsletter\" />\n              <Button data-testid=\"button-subscribe\">Subscribe</Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 text-center text-sm text-muted-foreground\">\n          <p data-testid=\"text-copyright\">\n            © 2025 RotiHai. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3394},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MapPin, Search } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport heroImage from '@assets/generated_images/Indian_food_spread_hero_01f8cdab.png';\n\nexport default function Hero() {\n  const [location, setLocation] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSearchFood = () => {\n    const locationLower = location.toLowerCase().trim();\n    \n    if (!locationLower) {\n      toast({\n        title: \"Location Required\",\n        description: \"Please enter your delivery location\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if location contains \"kurla\" or \"mumbai\"\n    if (!locationLower.includes(\"kurla\")) {\n      toast({\n        title: \"Delivery Not Available\",\n        description: \"We currently deliver only in Kurla, Mumbai. Please enter a Kurla location.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Location Confirmed\",\n      description: \"Great! We deliver to your area. Browse our menu below.\",\n    });\n\n    // Scroll to products section\n    setTimeout(() => {\n      const productsSection = document.getElementById(\"products-section\");\n      if (productsSection) {\n        productsSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      }\n    }, 500);\n  };\n\n  return (\n    <section className=\"relative h-[60vh] min-h-[400px] max-h-[600px] overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-r from-primary/15 via-primary/5 to-transparent\" />\n\n      <div className=\"relative h-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col items-center justify-center text-center\">\n        <h2\n          className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-white mb-4\"\n          data-testid=\"text-hero-title\"\n        >\n          Fresh Rotis Delivered\n          <br />\n          Ghar Jaisa Swaad\n        </h2>\n        <p className=\"text-lg sm:text-xl text-white/90 mb-8 max-w-2xl\" data-testid=\"text-hero-subtitle\">\n          Fresh rotis, homestyle meals, and restaurant specials in 30 minutes\n        </p>\n\n        <div className=\"w-full max-w-2xl bg-white/10 backdrop-blur-md rounded-lg p-4 border border-white/20\">\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <div className=\"flex-1 relative\">\n              <MapPin className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-white\" />\n              <Input\n                placeholder=\"Enter delivery location (Kurla, Mumbai)\"\n                className=\"pl-10 bg-white/90 border-white/30 text-foreground placeholder:text-muted-foreground\"\n                data-testid=\"input-location\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleSearchFood()}\n              />\n            </div>\n            <Button \n              size=\"lg\" \n              variant=\"default\" \n              className=\"gap-2\" \n              data-testid=\"button-search-food\"\n              onClick={handleSearchFood}\n            >\n              <Search className=\"h-5 w-5\" />\n              Search Food\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"mt-6 text-white/80 text-sm\" data-testid=\"text-delivery-time\">\n          Average delivery time: 25-30 mins\n        </p>\n      </div>\n    </section>\n  );\n}","size_bytes":3620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/examples/Home.tsx":{"content":"import Home from '../Home';\n\nexport default function HomeExample() {\n  return <Home />;\n}\n","size_bytes":90},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/CategoryMenuDrawer.tsx":{"content":"import { X, Star, Plus, Minus, Leaf } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Category, Product } from \"@shared/schema\";\n\ninterface CategoryMenuDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  category: Category | null;\n  chef: { id: string; name: string } | null;\n  products: Product[];\n  onAddToCart?: (productId: string, productName: string, price: number, image: string, quantity: number) => void;\n  cartItems?: { id: string; quantity: number; price: number }[]; // Added price to cartItems for totalPrice calculation\n  autoCloseOnAdd?: boolean;\n  onProceedToCart?: () => void; // Added prop for proceeding to cart\n}\n\nexport default function CategoryMenuDrawer({ \n  isOpen, \n  onClose, \n  category,\n  chef,\n  products,\n  onAddToCart,\n  cartItems = [],\n  autoCloseOnAdd = false,\n  onProceedToCart\n}: CategoryMenuDrawerProps) {\n  if (!isOpen || !category || !chef) return null;\n\n  const categoryProducts = products.filter(p => \n    p.categoryId === category.id && p.chefId === chef.id\n  );\n\n  const avgRating = categoryProducts.length > 0\n    ? (categoryProducts.reduce((sum, p) => sum + parseFloat(p.rating), 0) / categoryProducts.length).toFixed(1)\n    : \"0.0\";\n  const totalReviews = categoryProducts.reduce((sum, p) => sum + p.reviewCount, 0);\n\n  const getProductQuantity = (productId: string) => {\n    const cartItem = cartItems.find(item => item.id === productId);\n    return cartItem?.quantity || 0;\n  };\n\n  const handleQuantityChange = (product: Product, newQuantity: number) => {\n    if (newQuantity < 0) return;\n\n    const currentQuantity = getProductQuantity(product.id);\n    if (newQuantity === currentQuantity) return;\n\n    if (onAddToCart) {\n      onAddToCart(product.id, product.name, product.price, product.image, newQuantity);\n      // Don't auto-close - let users continue browsing and adding items\n    }\n  };\n\n  // Calculate total items and total price for the \"Proceed to Cart\" button\n  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n  return (\n    <>\n      <div\n        className=\"fixed inset-0 bg-black/50 z-50 transition-opacity\"\n        onClick={onClose}\n        data-testid=\"category-menu-backdrop\"\n      />\n\n      <div\n        className=\"fixed top-0 left-0 h-full w-full sm:w-[500px] bg-background z-50 shadow-lg transform transition-transform duration-300 ease-in-out\"\n        data-testid=\"category-menu-drawer\"\n      >\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <div>\n              <h2 className=\"text-xl font-bold text-primary\" data-testid=\"text-category-menu-title\">\n                {chef.name}\n              </h2>\n              <p className=\"text-sm text-muted-foreground\">{category.name}</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-category-menu\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-4 border-b bg-muted/30\" data-testid={`header-${category.id}`}>\n              <div className=\"flex items-start gap-3\">\n                <img \n                  src={category.image} \n                  alt={category.name}\n                  className=\"w-16 h-16 rounded-lg object-cover\"\n                  data-testid={`img-category-${category.id}`}\n                />\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-bold mb-1\" data-testid={`text-category-name-${category.id}`}>\n                    {category.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-category-description-${category.id}`}>\n                    {category.description}\n                  </p>\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"font-semibold\" data-testid={`text-category-rating-${category.id}`}>\n                        {avgRating}\n                      </span>\n                      <span className=\"text-muted-foreground\" data-testid={`text-category-reviews-${category.id}`}>\n                        ({totalReviews} reviews)\n                      </span>\n                    </div>\n                    <Badge variant=\"secondary\" data-testid={`badge-item-count-${category.id}`}>\n                      {category.itemCount}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-4 space-y-4\">\n              {categoryProducts.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-products\">\n                  No items available in this category\n                </p>\n              ) : (\n                categoryProducts.map((product) => {\n                  const currentQuantity = getProductQuantity(product.id);\n                  return (\n                    <div\n                      key={product.id}\n                      className=\"border rounded-lg p-4 space-y-3 hover:shadow-md transition-shadow\"\n                      data-testid={`product-card-${product.id}`}\n                    >\n                      <div className=\"flex gap-4\">\n                        <img\n                          src={product.image}\n                          alt={product.name}\n                          className=\"w-20 h-20 rounded-lg object-cover\"\n                          data-testid={`img-product-${product.id}`}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <div>\n                              <div className=\"flex items-center gap-2\">\n                                <h3 className=\"font-semibold text-base\" data-testid={`text-name-${product.id}`}>\n                                  {product.name}\n                                </h3>\n                                {product.isVeg && (\n                                  <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                                    <Leaf className=\"h-3 w-3 mr-1\" />\n                                    Veg\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"flex items-center gap-1 mt-1\">\n                                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                <span className=\"text-sm font-medium\" data-testid={`text-rating-${product.id}`}>\n                                  {product.rating}\n                                </span>\n                                <span className=\"text-xs text-muted-foreground\" data-testid={`text-reviews-${product.id}`}>\n                                  ({product.reviewCount})\n                                </span>\n                              </div>\n                            </div>\n                            <p className=\"font-bold text-lg\" data-testid={`text-price-${product.id}`}>\n                              ₹{product.price}\n                            </p>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\" data-testid={`text-description-${product.id}`}>\n                            {product.description}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end\">\n                        {currentQuantity === 0 ? (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleQuantityChange(product, 1)}\n                            className=\"w-24\"\n                            data-testid={`button-add-${product.id}`}\n                          >\n                            Add\n                          </Button>\n                        ) : (\n                          <div className=\"flex items-center gap-3 border rounded-md\">\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => handleQuantityChange(product, currentQuantity - 1)}\n                              className=\"h-8 w-8\"\n                              data-testid={`button-decrease-${product.id}`}\n                            >\n                              <Minus className=\"h-4 w-4\" />\n                            </Button>\n                            <span className=\"font-semibold min-w-8 text-center\" data-testid={`text-quantity-${product.id}`}>\n                              {currentQuantity}\n                            </span>\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => handleQuantityChange(product, currentQuantity + 1)}\n                              className=\"h-8 w-8\"\n                              data-testid={`button-increase-${product.id}`}\n                            >\n                              <Plus className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Proceed to Cart Button */}\n          <div className=\"border-t p-4\">\n            {totalItems > 0 ? (\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {totalItems} {totalItems === 1 ? 'item' : 'items'} in cart\n                  </span>\n                  <span className=\"font-semibold text-primary\">\n                    ₹{totalPrice}\n                  </span>\n                </div>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full\"\n                  onClick={() => {\n                    onClose();\n                    onProceedToCart?.();\n                  }}\n                  data-testid=\"button-proceed-to-cart\"\n                >\n                  Proceed to Cart\n                </Button>\n              </div>\n            ) : (\n              <div className=\"text-center text-sm text-muted-foreground\">\n                Add items to cart to proceed\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":11095},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return <Hero />;\n}\n","size_bytes":90},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/App.tsx":{"content":"import { Route, Switch, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { AdminGuard } from \"@/components/admin/AdminGuard\";\nimport Home from \"@/pages/Home\";\nimport Landing from \"@/pages/Landing\";\nimport MyOrders from \"@/pages/MyOrders\";\nimport Profile from \"@/pages/Profile\";\nimport NotFound from \"@/pages/not-found\";\nimport AdminLogin from \"@/pages/admin/AdminLogin\";\nimport AdminDashboard from \"@/pages/admin/AdminDashboard\";\nimport AdminOrders from \"@/pages/admin/AdminOrders\";\nimport AdminProducts from \"@/pages/admin/AdminProducts\";\nimport AdminCategories from \"@/pages/admin/AdminCategories\";\nimport AdminUsers from \"@/pages/admin/AdminUsers\";\nimport AdminChefs from \"@/pages/admin/AdminChefs\";\nimport AdminManagement from \"@/pages/admin/AdminManagement\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/admin/login\" component={() => <Redirect to=\"/admin/dashboard\" />} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/admin/orders\" component={AdminOrders} />\n      <Route path=\"/admin/products\" component={AdminProducts} />\n      <Route path=\"/admin/categories\" component={AdminCategories} />\n      <Route path=\"/admin/users\" component={AdminUsers} />\n      <Route path=\"/admin/chefs\" component={AdminChefs} />\n      <Route path=\"/admin/admins\" component={AdminManagement} />\n\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/orders\" component={MyOrders} />\n          <Route path=\"/profile\" component={Profile} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2210},"client/src/components/Header.tsx":{"content":"import { ShoppingCart, MapPin, Search, Menu, LogOut, User as UserIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface HeaderProps {\n  cartItemCount?: number;\n  onCartClick?: () => void;\n  onMenuClick?: () => void;\n  searchQuery?: string;\n  onSearchChange?: (query: string) => void;\n}\n\nexport default function Header({ cartItemCount = 0, onCartClick, onMenuClick, searchQuery = \"\", onSearchChange }: HeaderProps) {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n  return (\n    <header className=\"sticky top-0 z-50 bg-background border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between gap-4 h-16\">\n          <div className=\"flex items-center gap-4 flex-wrap\">\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onMenuClick}\n              data-testid=\"button-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <h1 className=\"text-2xl font-bold text-primary\" data-testid=\"text-logo\">\n              RotiHai\n            </h1>\n            <Button\n              variant=\"ghost\"\n              className=\"hidden lg:flex items-center gap-2\"\n              data-testid=\"button-location\"\n            >\n              <MapPin className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Delivering to Kurla</span>\n            </Button>\n          </div>\n\n          <div className=\"hidden md:flex flex-1 max-w-xl\">\n            <div className=\"relative w-full\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search for dishes...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => onSearchChange?.(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {user && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"gap-2 hidden lg:flex\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.profileImageUrl ?? undefined} alt={user.firstName ?? \"User\"} />\n                      <AvatarFallback>\n                        {user.firstName?.[0]?.toUpperCase() ?? user.email?.[0]?.toUpperCase() ?? \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm\">\n                      {user.firstName ?? user.email}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" data-testid=\"menu-user-dropdown\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem data-testid=\"menu-item-profile\">\n                    <UserIcon className=\"h-4 w-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-item-logout\">\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative\"\n              onClick={onCartClick}\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"h-5 w-5\" />\n              {cartItemCount > 0 && (\n                <Badge\n                  variant=\"destructive\"\n                  className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                  data-testid=\"badge-cart-count\"\n                >\n                  {cartItemCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"md:hidden pb-3\">\n          <div className=\"relative w-full\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search for dishes...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange?.(e.target.value)}\n              data-testid=\"input-search-mobile\"\n            />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5159},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ProductCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Minus, Star } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface ProductCardProps {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  rating?: number;\n  reviewCount?: number;\n  isVeg?: boolean;\n  isCustomizable?: boolean;\n  onAddToCart?: (quantity: number) => void;\n}\n\nexport default function ProductCard({\n  id,\n  name,\n  description,\n  price,\n  image,\n  rating = 4.5,\n  reviewCount = 0,\n  isVeg = true,\n  isCustomizable = false,\n  onAddToCart,\n}: ProductCardProps) {\n  const [quantity, setQuantity] = useState(0);\n\n  const handleAdd = () => {\n    const newQuantity = quantity + 1;\n    setQuantity(newQuantity);\n    onAddToCart?.(newQuantity);\n  };\n\n  const handleRemove = () => {\n    if (quantity > 0) {\n      const newQuantity = quantity - 1;\n      setQuantity(newQuantity);\n      onAddToCart?.(newQuantity);\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate group\" data-testid={`card-product-${id}`}>\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={image}\n          alt={name}\n          className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n          data-testid={`img-product-${id}`}\n        />\n        <div className=\"absolute top-3 left-3 flex gap-2\">\n          <Badge\n            variant={isVeg ? \"default\" : \"destructive\"}\n            className=\"bg-white/90 backdrop-blur-sm\"\n            data-testid={`badge-diet-${id}`}\n          >\n            <div className={`w-3 h-3 border-2 ${isVeg ? 'border-green-600' : 'border-red-600'} mr-1`}>\n              <div className={`w-full h-full ${isVeg ? 'bg-green-600' : 'bg-red-600'} rounded-full scale-50`} />\n            </div>\n            {isVeg ? 'Veg' : 'Non-Veg'}\n          </Badge>\n        </div>\n        {isCustomizable && (\n          <Badge\n            className=\"absolute top-3 right-3 bg-primary/90 backdrop-blur-sm\"\n            data-testid={`badge-customizable-${id}`}\n          >\n            Customizable\n          </Badge>\n        )}\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-start justify-between gap-2 mb-2 flex-wrap\">\n          <h3 className=\"font-semibold text-lg\" data-testid={`text-product-name-${id}`}>\n            {name}\n          </h3>\n          <span className=\"font-bold text-primary\" data-testid={`text-price-${id}`}>\n            ₹{price}\n          </span>\n        </div>\n\n        <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-description-${id}`}>\n          {description}\n        </p>\n\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n              <span className=\"text-sm font-medium\" data-testid={`text-rating-${id}`}>\n                {rating}\n              </span>\n            </div>\n            {reviewCount > 0 && (\n              <span className=\"text-xs text-muted-foreground\" data-testid={`text-reviews-${id}`}>\n                ({reviewCount})\n              </span>\n            )}\n          </div>\n\n          {quantity === 0 ? (\n            <Button size=\"sm\" onClick={handleAdd} className=\"gap-2\" data-testid={`button-add-${id}`}>\n              <Plus className=\"h-4 w-4\" />\n              Add\n            </Button>\n          ) : (\n            <div className=\"flex items-center gap-2\" data-testid={`controls-quantity-${id}`}>\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={handleRemove}\n                data-testid={`button-decrease-${id}`}\n              >\n                <Minus className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"w-8 text-center font-medium\" data-testid={`text-quantity-${id}`}>\n                {quantity}\n              </span>\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={handleAdd}\n                data-testid={`button-increase-${id}`}\n              >\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4442},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/Profile.tsx":{"content":"\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Mail, MapPin, Phone, LogOut } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <main className=\"flex-1 bg-muted/30\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">My Profile</h1>\n            <p className=\"text-muted-foreground\">Manage your account information</p>\n          </div>\n\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Information</CardTitle>\n                <CardDescription>Update your personal details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center gap-6\">\n                  <Avatar className=\"h-20 w-20\">\n                    <AvatarImage src={user.profileImageUrl ?? undefined} alt={user.firstName ?? \"User\"} />\n                    <AvatarFallback className=\"text-2xl\">\n                      {user.firstName?.[0]?.toUpperCase() ?? user.email?.[0]?.toUpperCase() ?? \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">\n                      {user.firstName} {user.lastName}\n                    </h3>\n                    <p className=\"text-muted-foreground\">{user.email}</p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      defaultValue={user.firstName ?? \"\"}\n                      readOnly\n                      className=\"bg-muted\"\n                    />\n                  </div>\n\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      defaultValue={user.lastName ?? \"\"}\n                      readOnly\n                      className=\"bg-muted\"\n                    />\n                  </div>\n\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <div className=\"flex gap-2\">\n                      <Mail className=\"h-4 w-4 mt-3 text-muted-foreground\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        defaultValue={user.email ?? \"\"}\n                        readOnly\n                        className=\"bg-muted\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Actions</CardTitle>\n                <CardDescription>Manage your account</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleLogout}\n                  className=\"w-full sm:w-auto\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Logout\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4213},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return (\n    <Header\n      cartItemCount={3}\n      onCartClick={() => console.log('Cart clicked')}\n      onMenuClick={() => console.log('Menu clicked')}\n    />\n  );\n}\n","size_bytes":244},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/MyOrders.tsx":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport MenuDrawer from \"@/components/MenuDrawer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingBag } from \"lucide-react\";\n\nexport default function MyOrders() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  \n  // TODO: Fetch actual orders from API\n  const orders = [];\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header onMenuClick={() => setIsMenuOpen(true)} />\n\n      <main className=\"flex-1 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">My Orders</h1>\n            <p className=\"text-muted-foreground\">Track and manage your orders</p>\n          </div>\n\n          {orders.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent className=\"flex flex-col items-center gap-4\">\n                <ShoppingBag className=\"h-16 w-16 text-muted-foreground\" />\n                <div>\n                  <CardTitle className=\"mb-2\">No orders yet</CardTitle>\n                  <CardDescription>\n                    Start ordering delicious food to see your orders here\n                  </CardDescription>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Orders will be displayed here */}\n            </div>\n          )}\n        </div>\n      </main>\n\n      <Footer />\n\n      <MenuDrawer\n        isOpen={isMenuOpen}\n        onClose={() => setIsMenuOpen(false)}\n        categories={categories}\n      />\n    </div>\n  );\n}\n","size_bytes":1971},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"replit.md":{"content":"# FoodExpress - Food Delivery Application\n\n## Overview\n\nFoodExpress is a full-stack food delivery web application that allows users to browse food items across multiple categories (Rotis, Lunch & Dinner, Hotel Specials), add items to their cart, and place orders. The application features authentication via Replit's OpenID Connect, real-time cart management, and a responsive design optimized for both desktop and mobile devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Technology Stack\n\n**Frontend:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for client-side routing (lightweight alternative to React Router)\n- TanStack Query (React Query) for server state management and data fetching\n- Tailwind CSS with custom design system based on shadcn/ui components\n- React Hook Form with Zod for form validation\n\n**Backend:**\n- Express.js running on Node.js\n- TypeScript for type safety across the entire stack\n- Session-based authentication using express-session\n\n**Design System:**\n- Custom Tailwind configuration with shadcn/ui (New York style)\n- Design inspired by leading food delivery platforms (Uber Eats, DoorDash, Swiggy, Zomato)\n- Typography using Inter/DM Sans with consistent spacing units (4, 6, 8, 12, 16, 20, 24)\n- Responsive grid layouts: 3-4 columns desktop, 2 tablet, 1 mobile\n\n### Authentication & Authorization\n\n**Customer Authentication (OpenID Connect via Replit):**\n- Passport.js strategy for OIDC authentication\n- Session management with configurable session stores (in-memory for development)\n- User data synchronized from OIDC claims to local user records\n- Protected routes require authentication via `isAuthenticated` middleware\n- Automatic token refresh handling\n\n**Admin Authentication (JWT-based):**\n- Separate authentication system for admin users using JWT tokens\n- Username and password-based login with bcrypt password hashing\n- Access tokens (15-minute expiry) and refresh tokens (7-day expiry)\n- Refresh tokens stored in httpOnly cookies for security\n- Automatic token refresh when access token expires\n- Role-based access control with three roles: `super_admin`, `manager`, `viewer`\n- Protected admin routes with AdminGuard component\n\n**Session Management:**\n- 7-day session TTL (time-to-live)\n- HTTP-only cookies for security\n- Secure flag enabled in production environments\n- Session secret configurable via environment variables\n\n### Data Layer Architecture\n\n**Schema Design:**\nThe application uses a shared schema (`shared/schema.ts`) with Drizzle ORM defining six main entities:\n\n1. **Users** - Stores customer profile information from OIDC provider\n2. **Admin Users** - Stores admin accounts with username, email, password hash, and role\n3. **Categories** - Product categorization (Rotis, Lunch & Dinner, Hotel Specials)\n4. **Products** - Food items with pricing, images, ratings, and dietary flags (vegetarian)\n5. **Orders** - Customer orders with delivery details and itemized products\n6. **Sessions** - PostgreSQL-based session persistence\n7. **Chefs** - Partner chefs and restaurants with ratings and reviews\n\n**Storage Abstraction:**\n- `IStorage` interface defines all data operations\n- `MemStorage` class provides in-memory implementation with seed data\n- Designed for easy migration to PostgreSQL implementation\n- All storage methods are async to support future database integration\n\n### API Architecture\n\n**Customer API Endpoints:**\n- `GET /api/auth/user` - Fetch authenticated user profile (protected)\n- `GET /api/categories` - List all food categories\n- `GET /api/products` - List all products (supports `?categoryId` filter)\n- `GET /api/products/:id` - Get single product details\n- `POST /api/orders` - Create new order (protected, validated with Zod)\n- `GET /api/orders/:id` - Retrieve order details (protected)\n- `GET /api/chefs` - List all chefs/restaurants\n- `GET /api/chefs/:categoryId` - Get chefs by category\n- `POST /api/calculate-delivery` - Calculate delivery fee based on location\n\n**Admin API Endpoints:**\n- `POST /api/admin/auth/login` - Admin login with username/password\n- `POST /api/admin/auth/logout` - Admin logout\n- `POST /api/admin/auth/refresh` - Refresh access token using refresh token\n- `GET /api/admin/dashboard/metrics` - Dashboard metrics (user count, orders, revenue, etc.)\n- `GET /api/admin/orders` - List all orders\n- `PATCH /api/admin/orders/:id/status` - Update order status (manager+)\n- `GET /api/admin/categories` - List all categories\n- `POST /api/admin/categories` - Create category (manager+)\n- `PATCH /api/admin/categories/:id` - Update category (manager+)\n- `DELETE /api/admin/categories/:id` - Delete category (super_admin)\n- `GET /api/admin/products` - List all products\n- `POST /api/admin/products` - Create product (manager+)\n- `PATCH /api/admin/products/:id` - Update product (manager+)\n- `DELETE /api/admin/products/:id` - Delete product (super_admin)\n- `GET /api/admin/users` - List all customer users\n- `GET /api/admin/chefs` - List all chefs\n- `GET /api/admin/admins` - List all admin users (super_admin)\n- `POST /api/admin/admins` - Create new admin user (super_admin)\n\n**Request/Response Pattern:**\n- JSON payloads for all API communications\n- Zod schema validation on order creation\n- Structured error responses with appropriate HTTP status codes\n- Request logging middleware for debugging API calls\n\n### State Management Strategy\n\n**Server State (TanStack Query):**\n- Centralized query client configuration\n- Custom `queryFn` with 401 unauthorized handling\n- Infinite stale time and disabled refetching for stable data\n- Optimistic updates for cart operations\n\n**Client State (React useState):**\n- Cart items managed in Home component\n- UI state (modals, drawers) managed locally in components\n- Search query state for product filtering\n\n**Authentication State:**\n- Custom `useAuth` hook wrapping TanStack Query\n- Returns user object, loading state, and authentication status\n- Separate routing logic for authenticated vs. unauthenticated users\n\n### Component Architecture\n\n**Page Components:**\n- `Landing.tsx` - Unauthenticated welcome page with feature highlights\n- `Home.tsx` - Main authenticated dashboard with categories, products, and cart\n- `NotFound.tsx` - 404 error page\n\n**Feature Components:**\n- `Header` - Sticky navigation with search, cart badge, user menu\n- `Hero` - Full-width banner with location input and search\n- `CategoryCard` - Visual card for browsing food categories\n- `ProductCard` - Food item card with add-to-cart controls\n- `CartSidebar` - Slide-out cart with quantity controls and checkout\n- `CheckoutDialog` - Modal form for order placement\n- `MenuDrawer` - Mobile-friendly navigation drawer\n- `Footer` - Links and newsletter signup\n\n**UI Components:**\n- 40+ shadcn/ui components (buttons, forms, dialogs, etc.)\n- Consistent design tokens via CSS variables\n- Dark mode support structure in place\n- Hover and active state elevation effects\n\n### Build & Development Configuration\n\n**Vite Configuration:**\n- Development server with HMR (Hot Module Replacement)\n- Path aliases: `@/` for client code, `@shared/` for shared schemas, `@assets/` for images\n- Conditional Replit-specific plugins (cartographer, dev banner, runtime error overlay)\n- Production build outputs to `dist/public`\n\n**TypeScript Configuration:**\n- Strict mode enabled for type safety\n- ESNext module resolution with bundler strategy\n- Incremental compilation with build info caching\n- Shared types between client and server via `@shared` alias\n\n**Development vs. Production:**\n- Development: Vite dev server proxies API requests to Express\n- Production: Express serves pre-built static assets from `dist/public`\n- Environment-specific configurations for sessions and cookies\n\n## External Dependencies\n\n### Third-Party Services\n\n**Replit Authentication Service:**\n- OIDC provider at `https://replit.com/oidc`\n- Provides user identity without password management\n- Returns standardized claims (sub, email, name, profile image)\n\n### Database (Configured for PostgreSQL)\n\n**Drizzle ORM:**\n- Schema-first ORM with TypeScript support\n- PostgreSQL dialect configured in `drizzle.config.ts`\n- Migration files stored in `./migrations`\n- Connection via `@neondatabase/serverless` driver (supports Neon and standard Postgres)\n- Schema uses `gen_random_uuid()` for primary key generation\n\n**Environment Requirements:**\n- `DATABASE_URL` - PostgreSQL connection string (required for production)\n- Currently using in-memory storage; database setup needed for persistence\n\n### UI Component Libraries\n\n**Radix UI Primitives:**\n- 25+ unstyled, accessible component primitives\n- Includes dialogs, dropdowns, tooltips, accordions, navigation menus\n- Full keyboard navigation and ARIA compliance\n\n**Additional UI Dependencies:**\n- `cmdk` - Command palette component\n- `lucide-react` - Icon library (250+ icons)\n- `react-day-picker` - Calendar/date picker\n- `embla-carousel-react` - Touch-enabled carousels\n- `recharts` - Data visualization (chart components)\n- `vaul` - Mobile drawer component\n\n### Form & Validation\n\n**React Hook Form:**\n- Performant form state management\n- Integration with Zod via `@hookform/resolvers`\n\n**Zod:**\n- Runtime type validation\n- Schema generation from Drizzle tables via `drizzle-zod`\n\n### Styling & Utilities\n\n**Tailwind CSS:**\n- JIT compiler for optimized CSS\n- PostCSS for autoprefixing\n- Custom color system with HSL variables\n- Utility classes for elevation effects\n\n**Class Utilities:**\n- `clsx` and `tailwind-merge` for conditional class merging\n- `class-variance-authority` for component variant patterns\n\n### Development Tools\n\n**Replit-Specific:**\n- `@replit/vite-plugin-cartographer` - Code navigation\n- `@replit/vite-plugin-dev-banner` - Development mode indicator\n- `@replit/vite-plugin-runtime-error-modal` - Error overlay\n\n### Session Storage\n\n**connect-pg-simple:**\n- PostgreSQL session store for express-session\n- Enables session persistence across server restarts\n- Automatic session cleanup based on expiration## Admin Panel\\n\\n### Overview\\nThe admin panel provides a comprehensive management interface for the FoodExpress platform with role-based access control.\\n\\n### Access\\n- **URL:** Visit `/admin/login` to access the admin panel\\n- **Default Credentials:**\\n  - Username: `admin`\\n  - Password: `admin123`\\n  - **Important:** Change the default password after first login\\n\\n### Features\\n\\n**Dashboard:**\\n- Real-time metrics display:\\n  - Total users count\\n  - Total orders count\\n  - Total revenue\\n  - Pending orders count\\n  - Completed orders count\\n- Quick overview of platform statistics\\n\\n**Order Management:**\\n- View all customer orders\\n- Update order status (pending → confirmed → preparing → out_for_delivery → delivered)\\n- View order details including items, customer info, and delivery address\\n- Filter and sort orders by status\\n\\n**Product Management:**\\n- Add, edit, and delete products\\n- Set product pricing and descriptions\\n- Upload product images\\n- Mark products as vegetarian or customizable\\n- Assign products to categories and chefs\\n\\n**Category Management:**\\n- View all food categories\\n- Add new categories (manager+)\\n- Edit category details (manager+)\\n- Delete categories (super_admin only)\\n\\n**User Management:**\\n- View all registered customer users\\n- See user registration dates and profile information\\n- Monitor platform growth\\n\\n**Chef/Restaurant Management:**\\n- View all partner chefs and restaurants\\n- See ratings and review counts\\n- Manage chef partnerships\\n\\n**Admin User Management (Super Admin Only):**\\n- Create new admin users\\n- Assign roles (super_admin, manager, viewer)\\n- View all admin accounts\\n\\n### Role-Based Access Control\\n\\n**Viewer:**\\n- Read-only access to all data\\n- Can view dashboard, orders, products, categories, users, and chefs\\n- Cannot create, update, or delete any data\\n\\n**Manager:**\\n- All viewer permissions\\n- Can create and update products\\n- Can create and update categories\\n- Can update order statuses\\n- Cannot delete products/categories\\n- Cannot manage admin users\\n\\n**Super Admin:**\\n- All manager permissions\\n- Can delete products and categories\\n- Can create and manage admin users\\n- Full access to all features\\n\\n### Security Features\\n\\n**Authentication:**\\n- JWT-based authentication with short-lived access tokens (15 minutes)\\n- Long-lived refresh tokens (7 days) stored in httpOnly cookies\\n- Automatic token refresh before expiry\\n- Secure password hashing using bcrypt\\n\\n**Authorization:**\\n- Role-based access control enforced on both frontend and backend\\n- Protected routes redirect unauthorized users to login\\n- API endpoints validate JWT tokens and user roles\\n- Different permission levels for different operations\\n\\n**Session Management:**\\n- Automatic logout on token expiry\\n- Secure cookie storage for refresh tokens\\n- Protection against XSS attacks\\n- CSRF protection with SameSite cookies\n","size_bytes":13009},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2277},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/CategoryCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ArrowRight } from \"lucide-react\";\n\ninterface CategoryCardProps {\n  id?: string;\n  title: string;\n  description: string;\n  itemCount: string;\n  image: string;\n  icon?: React.ReactNode;\n  onBrowse?: () => void;\n}\n\nexport default function CategoryCard({\n  id,\n  title,\n  description,\n  itemCount,\n  image,\n  icon,\n  onBrowse,\n}: CategoryCardProps) {\n  return (\n    <Card\n      id={id}\n      className=\"overflow-hidden hover-elevate active-elevate-2 cursor-pointer group\"\n      onClick={onBrowse}\n      data-testid={`card-category-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <div className=\"relative h-48 overflow-hidden\">\n        <img\n          src={image}\n          alt={title}\n          className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent\" />\n        {icon && (\n          <div className=\"absolute top-4 left-4 p-3 bg-white/90 backdrop-blur-sm rounded-lg\">\n            {icon}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"p-6\">\n        <h3 className=\"text-2xl font-bold mb-2\" data-testid={`text-category-title-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {title}\n        </h3>\n        <p className=\"text-muted-foreground mb-4\" data-testid=\"text-category-description\">\n          {description}\n        </p>\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <span className=\"text-sm font-medium text-primary\" data-testid=\"text-item-count\">\n            {itemCount}\n          </span>\n          <Button variant=\"ghost\" className=\"gap-2 group-hover:gap-3 transition-all\" data-testid=\"button-browse\">\n            Browse\n            <ArrowRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1967},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { UtensilsCrossed, Clock, ShieldCheck, Star } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted\">\n      <header className=\"sticky top-0 z-50 bg-background/80 backdrop-blur-md border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <h1 className=\"text-2xl font-bold text-primary\" data-testid=\"text-logo\">\n              RotiHai\n            </h1>\n            <Button onClick={handleLogin} data-testid=\"button-signin-landing\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        <section className=\"relative py-20 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-5xl sm:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Fresh Rotis Delivered\n              <br />\n              <span className=\"text-primary\">Ghar Jaisa Swaad</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-hero-subtitle\">\n              Warm, fresh rotis and homestyle meals delivered in 30 minutes\n            </p>\n            <Button size=\"lg\" onClick={handleLogin} className=\"text-lg px-8 py-6\" data-testid=\"button-get-started\">\n              Get Started\n            </Button>\n          </div>\n        </section>\n\n        <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-muted/50\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-features-heading\">\n              Why Choose RotiHai?\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              <div className=\"text-center\" data-testid=\"feature-card-variety\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <UtensilsCrossed className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Wide Variety</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  100+ dishes from rotis to complete meals\n                </p>\n              </div>\n\n              <div className=\"text-center\" data-testid=\"feature-card-delivery\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Clock className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Fast Delivery</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Average delivery time: 25-30 minutes\n                </p>\n              </div>\n\n              <div className=\"text-center\" data-testid=\"feature-card-quality\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <ShieldCheck className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Quality Assured</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Fresh ingredients and hygienic preparation\n                </p>\n              </div>\n\n              <div className=\"text-center\" data-testid=\"feature-card-rating\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Star className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Top Rated</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  4.5+ average rating from 10,000+ reviews\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\" data-testid=\"text-cta-heading\">\n              Ready to Order?\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8\" data-testid=\"text-cta-description\">\n              Sign in to browse our menu and start ordering delicious food today!\n            </p>\n            <Button size=\"lg\" onClick={handleLogin} className=\"text-lg px-8 py-6\" data-testid=\"button-signin-cta\">\n              Sign In to Order\n            </Button>\n          </div>\n        </section>\n      </main>\n\n      <footer className=\"border-t py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center text-sm text-muted-foreground\">\n          <p data-testid=\"text-footer\">© 2025 RotiHai. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5040},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":98},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb, index, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const adminRoleEnum = pgEnum(\"admin_role\", [\"super_admin\", \"manager\", \"viewer\"]);\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: adminRoleEnum(\"role\").notNull().default(\"viewer\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  iconName: text(\"icon_name\").notNull(),\n  itemCount: text(\"item_count\").notNull(),\n});\n\nexport const chefs = pgTable(\"chefs\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  rating: text(\"rating\").notNull(),\n  reviewCount: integer(\"review_count\").notNull(),\n  categoryId: text(\"category_id\").notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: integer(\"price\").notNull(),\n  image: text(\"image\").notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull().default(\"4.5\"),\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  isVeg: boolean(\"is_veg\").notNull().default(true),\n  isCustomizable: boolean(\"is_customizable\").notNull().default(false),\n  categoryId: varchar(\"category_id\").notNull(),\n  chefId: text(\"chef_id\"),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerName: text(\"customer_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  items: jsonb(\"items\").notNull(),\n  subtotal: integer(\"subtotal\").notNull(),\n  deliveryFee: integer(\"delivery_fee\").notNull(),\n  total: integer(\"total\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport const insertOrderSchema = z.object({\n  customerName: z.string(),\n  phone: z.string(),\n  address: z.string(),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n  items: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    price: z.number(),\n    quantity: z.number(),\n  })),\n  subtotal: z.number(),\n  deliveryFee: z.number(),\n  distance: z.number().optional(),\n  total: z.number(),\n  status: z.string(),\n});\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type Chef = typeof chefs.$inferSelect;\nexport type Product = typeof products.$inferSelect;\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  passwordHash: true,\n  lastLoginAt: true,\n  createdAt: true,\n}).extend({\n  password: z.string().min(8),\n});\n\nexport const adminLoginSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type AdminLogin = z.infer<typeof adminLoginSchema>;","size_bytes":4655},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/storage.ts":{"content":"import { type Category, type InsertCategory, type Product, type InsertProduct, type Order, type InsertOrder, type User, type UpsertUser, type Chef, type AdminUser, type InsertAdminUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { nanoid } from \"nanoid\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  getAllCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  getAllProducts(): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  getProductsByCategoryId(categoryId: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrderById(id: string): Promise<Order | undefined>;\n  getAllOrders(): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n\n  getChefs(): Promise<Chef[]>;\n  getChefsByCategory(categoryId: string): Promise<Chef[]>;\n\n  getAdminByUsername(username: string): Promise<AdminUser | undefined>;\n  getAdminById(id: string): Promise<AdminUser | undefined>;\n  createAdmin(admin: InsertAdminUser & { passwordHash: string }): Promise<AdminUser>;\n  updateAdminLastLogin(id: string): Promise<void>;\n  getAllAdmins(): Promise<AdminUser[]>;\n  getAllUsers(): Promise<User[]>;\n\n  getDashboardMetrics(): Promise<{\n    userCount: number;\n    orderCount: number;\n    totalRevenue: number;\n    pendingOrders: number;\n    completedOrders: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private categories: Map<string, Category>;\n  private chefs: Chef[];\n  private products: Map<string, Product>;\n  private orders: Map<string, Order>;\n  private adminUsers: Map<string, AdminUser>;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.chefs = [];\n    this.products = new Map();\n    this.orders = new Map();\n    this.adminUsers = new Map();\n    this.seedData();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existing = this.users.get(userData.id!);\n    const user: User = {\n      id: userData.id!,\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      createdAt: existing?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  private seedData() {\n    const rotiCategoryId = randomUUID();\n    const mealCategoryId = randomUUID();\n    const hotelCategoryId = randomUUID();\n\n    const categoriesData: InsertCategory[] = [\n      {\n        name: \"Fresh Rotis & Breads\",\n        description: \"Tandoori rotis, naan, and more freshly baked\",\n        itemCount: \"20+ varieties\",\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        iconName: \"UtensilsCrossed\",\n      },\n      {\n        name: \"Lunch & Dinner\",\n        description: \"Complete meals with rice, curry, and sides\",\n        itemCount: \"50+ dishes\",\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        iconName: \"ChefHat\",\n      },\n      {\n        name: \"Hotel Specials\",\n        description: \"Restaurant quality dishes delivered to you\",\n        itemCount: \"30+ partners\",\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        iconName: \"Hotel\",\n      },\n    ];\n\n    const categoryIds = [rotiCategoryId, mealCategoryId, hotelCategoryId];\n    categoriesData.forEach((cat, index) => {\n      const category: Category = { ...cat, id: categoryIds[index] };\n      this.categories.set(category.id, category);\n    });\n\n    // Initialize chefs/hotels\n    const chefs: Omit<Chef, \"id\">[] = [\n      {\n        name: \"Raju's Tandoor Kitchen\",\n        description: \"Authentic tandoori rotis made fresh\",\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.8\",\n        reviewCount: 245,\n        categoryId: rotiCategoryId,\n      },\n      {\n        name: \"Mumbai Roti House\",\n        description: \"Traditional rotis and parathas\",\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.6\",\n        reviewCount: 189,\n        categoryId: rotiCategoryId,\n      },\n      {\n        name: \"Home Kitchen by Meera\",\n        description: \"Home-style complete meals\",\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        rating: \"4.7\",\n        reviewCount: 312,\n        categoryId: mealCategoryId,\n      },\n      {\n        name: \"Annapurna Tiffin Service\",\n        description: \"Daily fresh lunch and dinner\",\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        rating: \"4.5\",\n        reviewCount: 198,\n        categoryId: mealCategoryId,\n      },\n      {\n        name: \"Taj Fine Dining\",\n        description: \"Premium restaurant experience\",\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        rating: \"4.9\",\n        reviewCount: 456,\n        categoryId: hotelCategoryId,\n      },\n      {\n        name: \"Royal Palace Restaurant\",\n        description: \"Royal Indian cuisine\",\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        rating: \"4.7\",\n        reviewCount: 378,\n        categoryId: hotelCategoryId,\n      },\n    ];\n\n    this.chefs = chefs.map(chef => ({\n      ...chef,\n      id: nanoid(),\n    }));\n\n    const chefsByCategory = {\n      [rotiCategoryId]: this.chefs.filter(c => c.categoryId === rotiCategoryId),\n      [mealCategoryId]: this.chefs.filter(c => c.categoryId === mealCategoryId),\n      [hotelCategoryId]: this.chefs.filter(c => c.categoryId === hotelCategoryId),\n    };\n\n    const productsData: InsertProduct[] = [\n      {\n        name: \"Butter Naan\",\n        description: \"Soft and buttery Indian flatbread\",\n        price: 40,\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.5\",\n        reviewCount: 128,\n        isVeg: true,\n        isCustomizable: false,\n        categoryId: rotiCategoryId,\n        chefId: chefsByCategory[rotiCategoryId][0]?.id,\n      },\n      {\n        name: \"Tandoori Roti\",\n        description: \"Whole wheat bread cooked in tandoor\",\n        price: 20,\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.6\",\n        reviewCount: 245,\n        isVeg: true,\n        isCustomizable: false,\n        categoryId: rotiCategoryId,\n        chefId: chefsByCategory[rotiCategoryId][0]?.id,\n      },\n      {\n        name: \"Garlic Naan\",\n        description: \"Naan topped with fresh garlic and butter\",\n        price: 50,\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.7\",\n        reviewCount: 189,\n        isVeg: true,\n        isCustomizable: false,\n        categoryId: rotiCategoryId,\n        chefId: chefsByCategory[rotiCategoryId][1]?.id,\n      },\n      {\n        name: \"Aloo Paratha\",\n        description: \"Stuffed flatbread with spiced potato filling\",\n        price: 60,\n        image: \"/assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png\",\n        rating: \"4.4\",\n        reviewCount: 167,\n        isVeg: true,\n        isCustomizable: true,\n        categoryId: rotiCategoryId,\n        chefId: chefsByCategory[rotiCategoryId][1]?.id,\n      },\n      {\n        name: \"North Indian Thali\",\n        description: \"Complete meal with dal, sabzi, roti, rice and dessert\",\n        price: 180,\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        rating: \"4.8\",\n        reviewCount: 234,\n        isVeg: true,\n        isCustomizable: true,\n        categoryId: mealCategoryId,\n        chefId: chefsByCategory[mealCategoryId][0]?.id,\n      },\n      {\n        name: \"Rajasthani Thali\",\n        description: \"Traditional Rajasthani meal with dal baati churma and more\",\n        price: 220,\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        rating: \"4.6\",\n        reviewCount: 89,\n        isVeg: true,\n        isCustomizable: false,\n        categoryId: mealCategoryId,\n        chefId: chefsByCategory[mealCategoryId][0]?.id,\n      },\n      {\n        name: \"South Indian Meal\",\n        description: \"Rice, sambar, rasam, vegetables and curd\",\n        price: 150,\n        image: \"/assets/generated_images/Complete_Indian_thali_meal_837cc17d.png\",\n        rating: \"4.7\",\n        reviewCount: 142,\n        isVeg: true,\n        isCustomizable: true,\n        categoryId: mealCategoryId,\n        chefId: chefsByCategory[mealCategoryId][1]?.id,\n      },\n      {\n        name: \"Paneer Tikka\",\n        description: \"Grilled cottage cheese marinated in Indian spices\",\n        price: 220,\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        rating: \"4.6\",\n        reviewCount: 156,\n        isVeg: true,\n        isCustomizable: true,\n        categoryId: hotelCategoryId,\n        chefId: chefsByCategory[hotelCategoryId][0]?.id,\n      },\n      {\n        name: \"Butter Chicken\",\n        description: \"Tender chicken in creamy tomato-based curry\",\n        price: 280,\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        rating: \"4.9\",\n        reviewCount: 312,\n        isVeg: false,\n        isCustomizable: true,\n        categoryId: hotelCategoryId,\n        chefId: chefsByCategory[hotelCategoryId][0]?.id,\n      },\n      {\n        name: \"Biryani Special\",\n        description: \"Aromatic basmati rice with spices and your choice of protein\",\n        price: 250,\n        image: \"/assets/generated_images/Fine_dining_restaurant_setup_1724ed85.png\",\n        rating: \"4.8\",\n        reviewCount: 278,\n        isVeg: false,\n        isCustomizable: true,\n        categoryId: hotelCategoryId,\n        chefId: chefsByCategory[hotelCategoryId][1]?.id,\n      },\n    ];\n\n    productsData.forEach((prod) => {\n      const product: Product = {\n        ...prod,\n        id: randomUUID(),\n        rating: prod.rating || \"4.5\",\n        reviewCount: prod.reviewCount || 0,\n        isVeg: prod.isVeg !== undefined ? prod.isVeg : true,\n        isCustomizable: prod.isCustomizable !== undefined ? prod.isCustomizable : false,\n      };\n      this.products.set(product.id, product);\n    });\n  }\n\n  async getAllCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = { ...insertCategory, id };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductsByCategoryId(categoryId: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(\n      (product) => product.categoryId === categoryId\n    );\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      rating: insertProduct.rating || \"4.5\",\n      reviewCount: insertProduct.reviewCount || 0,\n      isVeg: insertProduct.isVeg !== undefined ? insertProduct.isVeg : true,\n      isCustomizable: insertProduct.isCustomizable !== undefined ? insertProduct.isCustomizable : false,\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = {\n      ...insertOrder,\n      id,\n      status: insertOrder.status || \"pending\",\n      createdAt: new Date(),\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getOrderById(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getChefs(): Promise<Chef[]> {\n    return this.chefs;\n  }\n\n  async getChefsByCategory(categoryId: string): Promise<Chef[]> {\n    return this.chefs.filter(chef => chef.categoryId === categoryId);\n  }\n\n  async updateCategory(id: string, updateData: Partial<InsertCategory>): Promise<Category | undefined> {\n    const category = this.categories.get(id);\n    if (!category) return undefined;\n    const updated: Category = { ...category, ...updateData };\n    this.categories.set(id, updated);\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    const updated: Product = { ...product, ...updateData };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    const updated: Order = { ...order, status };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async getAdminByUsername(username: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(\n      (admin) => admin.username === username\n    );\n  }\n\n  async getAdminById(id: string): Promise<AdminUser | undefined> {\n    return this.adminUsers.get(id);\n  }\n\n  async createAdmin(adminData: InsertAdminUser & { passwordHash: string }): Promise<AdminUser> {\n    const id = randomUUID();\n    const admin: AdminUser = {\n      id,\n      username: adminData.username,\n      email: adminData.email,\n      passwordHash: adminData.passwordHash,\n      role: adminData.role || \"viewer\",\n      lastLoginAt: null,\n      createdAt: new Date(),\n    };\n    this.adminUsers.set(id, admin);\n    return admin;\n  }\n\n  async updateAdminLastLogin(id: string): Promise<void> {\n    const admin = this.adminUsers.get(id);\n    if (admin) {\n      admin.lastLoginAt = new Date();\n      this.adminUsers.set(id, admin);\n    }\n  }\n\n  async getAllAdmins(): Promise<AdminUser[]> {\n    return Array.from(this.adminUsers.values());\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getDashboardMetrics(): Promise<{\n    userCount: number;\n    orderCount: number;\n    totalRevenue: number;\n    pendingOrders: number;\n    completedOrders: number;\n  }> {\n    const orders = Array.from(this.orders.values());\n    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);\n    const pendingOrders = orders.filter((o) => o.status === \"pending\").length;\n    const completedOrders = orders.filter((o) => o.status === \"delivered\" || o.status === \"completed\").length;\n\n    return {\n      userCount: this.users.size,\n      orderCount: this.orders.size,\n      totalRevenue,\n      pendingOrders,\n      completedOrders,\n    };\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":15924},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/MenuDrawer.tsx":{"content":"import { X, Home, UtensilsCrossed, ShoppingBag, User, LogOut, ChevronRight, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useLocation } from \"wouter\";\nimport type { Category } from \"@shared/schema\";\n\ninterface MenuDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  categories?: Category[];\n  onCategoryClick?: (categoryId: string) => void;\n  selectedCategoryTab?: string;\n  onCategoryTabChange?: (value: string) => void;\n}\n\nexport default function MenuDrawer({ isOpen, onClose, categories = [], onCategoryClick, selectedCategoryTab = \"all\", onCategoryTabChange }: MenuDrawerProps) {\n  const [, setLocation] = useLocation();\n  \n  if (!isOpen) return null;\n\n  const handleCategoryClick = (categoryId: string) => {\n    onCategoryClick?.(categoryId);\n    onClose();\n  };\n\n  const handleHomeClick = () => {\n    setLocation(\"/\");\n    onClose();\n  };\n\n  const handleMyOrdersClick = () => {\n    setLocation(\"/orders\");\n    onClose();\n  };\n\n  const handleProfileClick = () => {\n    setLocation(\"/profile\");\n    onClose();\n  };\n\n  const handleSettingsClick = () => {\n    // TODO: Navigate to settings page when implemented\n    console.log('Settings clicked');\n    onClose();\n  };\n\n  const handleLogoutClick = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <>\n      <div\n        className=\"fixed inset-0 bg-black/50 z-50 transition-opacity\"\n        onClick={onClose}\n        data-testid=\"menu-backdrop\"\n      />\n\n      <div\n        className=\"fixed top-0 left-0 h-full w-80 bg-background z-50 shadow-lg transform transition-transform duration-300 ease-in-out\"\n        data-testid=\"menu-drawer\"\n      >\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-xl font-bold text-primary\" data-testid=\"text-menu-title\">\n              FoodExpress Menu\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-menu\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-4 space-y-6\">\n              <div>\n                <h3 className=\"text-sm font-semibold text-muted-foreground mb-3\" data-testid=\"text-navigation-heading\">\n                  Navigation\n                </h3>\n                <div className=\"space-y-1\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start\"\n                    onClick={handleHomeClick}\n                    data-testid=\"button-nav-home\"\n                  >\n                    <Home className=\"h-4 w-4 mr-3\" />\n                    Home\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start\"\n                    onClick={handleMyOrdersClick}\n                    data-testid=\"button-nav-orders\"\n                  >\n                    <ShoppingBag className=\"h-4 w-4 mr-3\" />\n                    My Orders\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start\"\n                    onClick={handleProfileClick}\n                    data-testid=\"button-nav-profile\"\n                  >\n                    <User className=\"h-4 w-4 mr-3\" />\n                    Profile\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"text-sm font-semibold text-muted-foreground mb-3\" data-testid=\"text-categories-heading\">\n                  Browse Categories\n                </h3>\n                <Tabs value={selectedCategoryTab} onValueChange={(value) => {\n                  onCategoryTabChange?.(value);\n                  onClose();\n                }} className=\"mb-4\">\n                  <TabsList className=\"w-full flex-wrap h-auto gap-1 p-1\" data-testid=\"category-tabs\">\n                    <TabsTrigger value=\"all\" data-testid=\"tab-all\" className=\"flex-1 min-w-[80px]\">All</TabsTrigger>\n                    {categories.map((category) => (\n                      <TabsTrigger key={category.id} value={category.id} data-testid={`tab-${category.id}`} className=\"flex-1 min-w-[80px]\">\n                        {category.name}\n                      </TabsTrigger>\n                    ))}\n                  </TabsList>\n                </Tabs>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"text-sm font-semibold text-muted-foreground mb-3\" data-testid=\"text-settings-heading\">\n                  Settings\n                </h3>\n                <div className=\"space-y-1\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start\"\n                    onClick={handleSettingsClick}\n                    data-testid=\"button-settings\"\n                  >\n                    <Settings className=\"h-4 w-4 mr-3\" />\n                    Settings\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-destructive hover:text-destructive\"\n                    onClick={handleLogoutClick}\n                    data-testid=\"button-logout\"\n                  >\n                    <LogOut className=\"h-4 w-4 mr-3\" />\n                    Logout\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </ScrollArea>\n\n          <div className=\"p-4 border-t\">\n            <p className=\"text-xs text-muted-foreground text-center\" data-testid=\"text-menu-footer\">\n              © 2025 FoodExpress. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":6127},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport createMemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const MemoryStore = createMemoryStore(session);\n  const sessionStore = new MemoryStore({\n    checkPeriod: sessionTtl,\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET ?? \"dev-secret-change-in-production\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  const registeredStrategies = new Set<string>();\n\n  const ensureStrategy = (domain: string) => {\n    const strategyName = `replitauth:${domain}`;\n    if (!registeredStrategies.has(strategyName)) {\n      const strategy = new Strategy(\n        {\n          name: strategyName,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n      registeredStrategies.add(strategyName);\n    }\n  };\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4353},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/CheckoutDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle2 } from \"lucide-react\";\n\nconst checkoutSchema = z.object({\n  customerName: z.string().min(2, \"Name must be at least 2 characters\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  address: z.string().min(10, \"Please enter a complete address\"),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n});\n\ntype CheckoutFormData = z.infer<typeof checkoutSchema>;\n\ninterface CheckoutDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  cartItems: Array<{\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n  }>;\n  subtotal: number;\n  deliveryFee: number;\n  total: number;\n  onOrderSuccess: () => void;\n}\n\nexport default function CheckoutDialog({\n  isOpen,\n  onClose,\n  cartItems,\n  subtotal,\n  deliveryFee: initialDeliveryFee,\n  total: initialTotal,\n  onOrderSuccess,\n}: CheckoutDialogProps) {\n  const { toast } = useToast();\n  const [orderPlaced, setOrderPlaced] = useState(false);\n  const [orderId, setOrderId] = useState<string>(\"\");\n  const [calculatedDistance, setCalculatedDistance] = useState<number | null>(null);\n  const [calculatedDeliveryFee, setCalculatedDeliveryFee] = useState(initialDeliveryFee);\n  const [isCalculatingDistance, setIsCalculatingDistance] = useState(false);\n\n  const form = useForm<CheckoutFormData>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      customerName: \"\",\n      phone: \"\",\n      address: \"\",\n      latitude: \"\",\n      longitude: \"\",\n    },\n  });\n\n  const placeOrderMutation = useMutation({\n    mutationFn: async (data: CheckoutFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/orders\", {\n        customerName: data.customerName,\n        phone: data.phone,\n        address: data.address,\n        latitude: data.latitude ? parseFloat(data.latitude) : undefined,\n        longitude: data.longitude ? parseFloat(data.longitude) : undefined,\n        items: cartItems,\n        subtotal,\n        deliveryFee: calculatedDeliveryFee,\n        distance: calculatedDistance || undefined,\n        total: subtotal + calculatedDeliveryFee,\n        status: \"pending\",\n      });\n      return await res.json();\n    },\n    onSuccess: (order: any) => {\n      setOrderPlaced(true);\n      setOrderId(order.id);\n      toast({\n        title: \"Order placed successfully!\",\n        description: `Your order #${order.id.substring(0, 8)} has been placed.`,\n      });\n      onOrderSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Order failed\",\n        description: \"There was an error placing your order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateDistanceAndFee = async () => {\n    const latitude = form.getValues(\"latitude\");\n    const longitude = form.getValues(\"longitude\");\n    const address = form.getValues(\"address\");\n    \n    // Check if address contains Kurla\n    const addressLower = address.toLowerCase().trim();\n    if (!addressLower.includes(\"kurla\")) {\n      toast({\n        title: \"Delivery Not Available\",\n        description: \"We currently deliver only in Kurla, Mumbai. Please enter a Kurla address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!latitude || !longitude) {\n      toast({\n        title: \"Location required\",\n        description: \"Please enter your delivery coordinates to calculate delivery fee\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsCalculatingDistance(true);\n    \n    try {\n      const res = await apiRequest(\"POST\", \"/api/calculate-delivery\", {\n        latitude: parseFloat(latitude),\n        longitude: parseFloat(longitude),\n      });\n      const result = await res.json();\n      \n      // Additional validation based on distance\n      if (result.distance > 10) {\n        toast({\n          title: \"Location Too Far\",\n          description: \"The location seems outside our Kurla delivery area. Please verify your address.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setCalculatedDistance(result.distance);\n      setCalculatedDeliveryFee(result.deliveryFee);\n      \n      toast({\n        title: \"Delivery fee calculated\",\n        description: `Distance: ${result.distance}km | Fee: ₹${result.deliveryFee}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Calculation failed\",\n        description: \"Could not calculate delivery fee. Using default fee.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCalculatingDistance(false);\n    }\n  };\n\n  const onSubmit = (data: CheckoutFormData) => {\n    placeOrderMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    setOrderPlaced(false);\n    setOrderId(\"\");\n    form.reset();\n    onClose();\n  };\n\n  if (orderPlaced) {\n    return (\n      <Dialog open={isOpen} onOpenChange={handleClose}>\n        <DialogContent data-testid=\"dialog-order-success\">\n          <div className=\"text-center py-8\">\n            <CheckCircle2 className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n            <DialogTitle className=\"text-2xl mb-2\" data-testid=\"text-success-title\">\n              Order Placed Successfully!\n            </DialogTitle>\n            <DialogDescription className=\"text-base mb-6\" data-testid=\"text-success-description\">\n              Your order #{orderId.substring(0, 8)} has been confirmed and will be delivered soon.\n            </DialogDescription>\n            <div className=\"space-y-2 text-sm text-muted-foreground mb-6\">\n              {calculatedDistance && (\n                <p>Delivery distance: {calculatedDistance} km</p>\n              )}\n              <p>Estimated delivery time: {calculatedDistance ? `${Math.ceil(calculatedDistance * 2 + 15)}-${Math.ceil(calculatedDistance * 2 + 20)}` : '25-30'} minutes</p>\n              <p>Total amount: ₹{subtotal + calculatedDeliveryFee}</p>\n            </div>\n            <Button onClick={handleClose} data-testid=\"button-close-success\">\n              Continue Shopping\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-checkout\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-checkout-title\">Complete Your Order</DialogTitle>\n          <DialogDescription data-testid=\"text-checkout-description\">\n            Enter your delivery details to place the order\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"customerName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter your name\"\n                      {...field}\n                      data-testid=\"input-customer-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone Number</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter your phone number\"\n                      {...field}\n                      data-testid=\"input-phone\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Delivery Address (Kurla Only)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter your complete delivery address in Kurla, Mumbai\"\n                      {...field}\n                      data-testid=\"input-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <FormField\n                control={form.control}\n                name=\"latitude\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Latitude</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., 28.6139\"\n                        {...field}\n                        data-testid=\"input-latitude\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"longitude\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Longitude</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., 77.2090\"\n                        {...field}\n                        data-testid=\"input-longitude\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={calculateDistanceAndFee}\n              disabled={isCalculatingDistance}\n              className=\"w-full\"\n              data-testid=\"button-calculate-delivery\"\n            >\n              {isCalculatingDistance ? \"Calculating...\" : \"Calculate Delivery Fee\"}\n            </Button>\n\n            {calculatedDistance !== null && (\n              <div className=\"bg-muted p-3 rounded-md text-sm\">\n                <p className=\"font-medium\">Distance: {calculatedDistance} km</p>\n                <p className=\"text-muted-foreground text-xs mt-1\">\n                  Delivery time: {Math.ceil(calculatedDistance * 2 + 15)}-{Math.ceil(calculatedDistance * 2 + 20)} minutes\n                </p>\n              </div>\n            )}\n\n            <div className=\"border-t pt-4 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal</span>\n                <span>₹{subtotal}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Delivery Fee</span>\n                <span>₹{calculatedDeliveryFee}</span>\n              </div>\n              <div className=\"flex justify-between font-semibold text-lg border-t pt-2\">\n                <span>Total</span>\n                <span className=\"text-primary\">₹{subtotal + calculatedDeliveryFee}</span>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-checkout\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={placeOrderMutation.isPending}\n                data-testid=\"button-place-order\"\n              >\n                {placeOrderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12467},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Warm Roti Theme */\n:root {\n  --button-outline: rgba(101, 67, 33, .15);\n  --badge-outline: rgba(101, 67, 33, .08);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(101, 67, 33, .04);\n  --elevate-2: rgba(101, 67, 33, .10);\n\n  --background: 32 40% 97%;\n\n  --foreground: 25 30% 15%;\n\n  --border: 30 25% 85%;\n\n  --card: 30 35% 96%;\n\n  --card-foreground: 25 30% 15%;\n\n  --card-border: 30 25% 90%;\n\n  --sidebar: 28 30% 94%;\n\n  --sidebar-foreground: 25 30% 15%;\n\n  --sidebar-border: 30 25% 88%;\n\n  --sidebar-primary: 30 70% 45%;\n\n  --sidebar-primary-foreground: 30 10% 98%;\n\n  --sidebar-accent: 28 35% 88%;\n\n  --sidebar-accent-foreground: 25 30% 15%;\n\n  --sidebar-ring: 30 70% 45%;\n\n  --popover: 30 30% 92%;\n\n  --popover-foreground: 25 30% 15%;\n\n  --popover-border: 30 25% 82%;\n\n  --primary: 30 70% 45%;\n\n  --primary-foreground: 30 10% 98%;\n\n  --secondary: 28 25% 88%;\n\n  --secondary-foreground: 25 30% 15%;\n\n  --muted: 28 20% 86%;\n\n  --muted-foreground: 25 15% 45%;\n\n  --accent: 32 30% 85%;\n\n  --accent-foreground: 25 30% 15%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 30 20% 75%;\n  --ring: 30 70% 45%;\n  --chart-1: 24 95% 53%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 262 52% 47%;\n  --chart-4: 45 93% 47%;\n  --chart-5: 197 71% 48%;\n\n  --font-sans: Inter, DM Sans, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"SF Mono\", Menlo, Monaco, \"Courier New\", monospace;\n  --radius: .75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.10), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 12px 24px -4px hsl(0 0% 0% / 0.12), 0px 6px 12px -6px hsl(0 0% 0% / 0.10);\n  --shadow-xl: 0px 20px 40px -8px hsl(0 0% 0% / 0.14), 0px 10px 20px -10px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 32px 64px -12px hsl(0 0% 0% / 0.16);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(210, 180, 140, .12);\n  --badge-outline: rgba(210, 180, 140, .06);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(210, 180, 140, .05);\n  --elevate-2: rgba(210, 180, 140, .11);\n\n  --background: 25 25% 12%;\n\n  --foreground: 30 15% 95%;\n\n  --border: 28 20% 22%;\n\n  --card: 26 22% 15%;\n\n  --card-foreground: 30 15% 95%;\n\n  --card-border: 28 20% 20%;\n\n  --sidebar: 26 20% 16%;\n\n  --sidebar-foreground: 30 15% 95%;\n\n  --sidebar-border: 28 20% 23%;\n\n  --sidebar-primary: 30 65% 50%;\n\n  --sidebar-primary-foreground: 30 10% 98%;\n\n  --sidebar-accent: 28 25% 22%;\n\n  --sidebar-accent-foreground: 30 15% 95%;\n\n  --sidebar-ring: 30 65% 50%;\n\n  --popover: 26 22% 18%;\n\n  --popover-foreground: 30 15% 95%;\n\n  --popover-border: 28 20% 25%;\n\n  --primary: 30 65% 50%;\n\n  --primary-foreground: 30 10% 98%;\n\n  --secondary: 28 18% 22%;\n\n  --secondary-foreground: 30 15% 95%;\n\n  --muted: 28 15% 24%;\n\n  --muted-foreground: 30 10% 65%;\n\n  --accent: 28 20% 26%;\n\n  --accent-foreground: 30 15% 95%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 28 15% 32%;\n  --ring: 30 65% 50%;\n  --chart-1: 24 95% 63%;\n  --chart-2: 142 71% 55%;\n  --chart-3: 262 52% 60%;\n  --chart-4: 45 93% 57%;\n  --chart-5: 197 71% 58%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 2px 4px -2px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.50), 0px 3px 6px -3px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 12px 24px -4px hsl(0 0% 0% / 0.55), 0px 6px 12px -6px hsl(0 0% 0% / 0.45);\n  --shadow-xl: 0px 20px 40px -8px hsl(0 0% 0% / 0.60), 0px 10px 20px -10px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 32px 64px -12px hsl(0 0% 0% / 0.65);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11264},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/examples/ProductCard.tsx":{"content":"import ProductCard from '../ProductCard';\nimport rotiImage from '@assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png';\n\nexport default function ProductCardExample() {\n  return (\n    <div className=\"max-w-sm\">\n      <ProductCard\n        id=\"butter-naan\"\n        name=\"Butter Naan\"\n        description=\"Soft and fluffy naan brushed with butter, freshly baked in tandoor\"\n        price={45}\n        image={rotiImage}\n        rating={4.7}\n        reviewCount={128}\n        isVeg={true}\n        isCustomizable={true}\n        onAddToCart={(qty) => console.log('Added to cart, quantity:', qty)}\n      />\n    </div>\n  );\n}\n","size_bytes":628},"client/src/components/examples/CartSidebar.tsx":{"content":"import { useState } from 'react';\nimport CartSidebar from '../CartSidebar';\nimport { Button } from '@/components/ui/button';\nimport rotiImage from '@assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png';\n\nexport default function CartSidebarExample() {\n  const [isOpen, setIsOpen] = useState(true);\n  \n  const mockItems = [\n    {\n      id: '1',\n      name: 'Butter Naan',\n      price: 45,\n      quantity: 2,\n      image: rotiImage,\n    },\n    {\n      id: '2',\n      name: 'Tandoori Roti',\n      price: 30,\n      quantity: 4,\n      image: rotiImage,\n    },\n  ];\n\n  return (\n    <div className=\"h-screen\">\n      <Button onClick={() => setIsOpen(true)}>Open Cart</Button>\n      <CartSidebar\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        items={mockItems}\n        onUpdateQuantity={(id, qty) => console.log('Update quantity:', id, qty)}\n        onCheckout={() => console.log('Checkout')}\n      />\n    </div>\n  );\n}\n","size_bytes":948},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/examples/CategoryCard.tsx":{"content":"import CategoryCard from '../CategoryCard';\nimport { UtensilsCrossed } from 'lucide-react';\nimport rotiImage from '@assets/generated_images/Fresh_tandoori_rotis_stack_1dcda2c7.png';\n\nexport default function CategoryCardExample() {\n  return (\n    <div className=\"max-w-sm\">\n      <CategoryCard\n        title=\"Fresh Rotis & Breads\"\n        description=\"Tandoori rotis, naan, and more freshly baked\"\n        itemCount=\"20+ varieties\"\n        image={rotiImage}\n        icon={<UtensilsCrossed className=\"h-6 w-6 text-primary\" />}\n        onBrowse={() => console.log('Browse rotis')}\n      />\n    </div>\n  );\n}\n","size_bytes":605},"server/adminAuth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport type { AdminUser } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"admin-jwt-secret-change-in-production\";\nconst JWT_EXPIRES_IN = \"15m\";\nconst REFRESH_TOKEN_EXPIRES_IN = \"7d\";\n\nexport interface AdminTokenPayload {\n  adminId: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport interface AuthenticatedAdminRequest extends Request {\n  admin?: AdminTokenPayload;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n}\n\nexport async function verifyPassword(\n  password: string,\n  hash: string\n): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function generateAccessToken(admin: AdminUser): string {\n  const payload: AdminTokenPayload = {\n    adminId: admin.id,\n    username: admin.username,\n    email: admin.email,\n    role: admin.role,\n  };\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n}\n\nexport function generateRefreshToken(admin: AdminUser): string {\n  const payload: AdminTokenPayload = {\n    adminId: admin.id,\n    username: admin.username,\n    email: admin.email,\n    role: admin.role,\n  };\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: REFRESH_TOKEN_EXPIRES_IN });\n}\n\nexport function verifyToken(token: string): AdminTokenPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as AdminTokenPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function requireAdmin(allowedRoles?: string[]) {\n  return (req: AuthenticatedAdminRequest, res: Response, next: NextFunction) => {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      res.status(401).json({ message: \"No token provided\" });\n      return;\n    }\n\n    const token = authHeader.substring(7);\n    const payload = verifyToken(token);\n\n    if (!payload) {\n      res.status(401).json({ message: \"Invalid or expired token\" });\n      return;\n    }\n\n    if (allowedRoles && !allowedRoles.includes(payload.role)) {\n      res.status(403).json({ message: \"Insufficient permissions\" });\n      return;\n    }\n\n    req.admin = payload;\n    next();\n  };\n}\n\nexport function requireSuperAdmin() {\n  return requireAdmin([\"super_admin\"]);\n}\n\nexport function requireAdminOrManager() {\n  return requireAdmin([\"super_admin\", \"manager\"]);\n}\n","size_bytes":2491},"client/src/hooks/useAdminAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface AdminUser {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport function useAdminAuth() {\n  const [, setLocation] = useLocation();\n  const [admin, setAdmin] = useState<AdminUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const adminUserStr = localStorage.getItem(\"adminUser\");\n    const token = localStorage.getItem(\"adminToken\");\n\n    if (adminUserStr && token) {\n      setAdmin(JSON.parse(adminUserStr));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const refreshToken = async (): Promise<string | null> => {\n    try {\n      const response = await fetch(\"/api/admin/auth/refresh\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Token refresh failed\");\n      }\n\n      const data = await response.json();\n      localStorage.setItem(\"adminToken\", data.accessToken);\n      localStorage.setItem(\"adminUser\", JSON.stringify(data.admin));\n      setAdmin(data.admin);\n      return data.accessToken;\n    } catch (error) {\n      console.error(\"Token refresh failed:\", error);\n      localStorage.removeItem(\"adminToken\");\n      localStorage.removeItem(\"adminUser\");\n      setAdmin(null);\n      setLocation(\"/admin/login\");\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch(\"/api/admin/auth/logout\", { method: \"POST\", credentials: \"include\" });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      localStorage.removeItem(\"adminToken\");\n      localStorage.removeItem(\"adminUser\");\n      setAdmin(null);\n      setLocation(\"/admin/login\");\n    }\n  };\n\n  return {\n    admin,\n    isLoading,\n    isAuthenticated: !!admin,\n    refreshToken,\n    logout,\n  };\n}\n\nexport async function adminApiRequest(\n  url: string,\n  options: RequestInit = {}\n): Promise<Response> {\n  const token = localStorage.getItem(\"adminToken\");\n\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (response.status === 401) {\n    const refreshResponse = await fetch(\"/api/admin/auth/refresh\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n\n    if (refreshResponse.ok) {\n      const data = await refreshResponse.json();\n      localStorage.setItem(\"adminToken\", data.accessToken);\n      localStorage.setItem(\"adminUser\", JSON.stringify(data.admin));\n\n      return fetch(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          Authorization: `Bearer ${data.accessToken}`,\n        },\n      });\n    } else {\n      localStorage.removeItem(\"adminToken\");\n      localStorage.removeItem(\"adminUser\");\n      window.location.href = \"/admin/login\";\n      throw new Error(\"Session expired\");\n    }\n  }\n\n  return response;\n}\n","size_bytes":2932},"client/src/pages/admin/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { adminLoginSchema, type AdminLogin } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { ShieldCheck } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<AdminLogin>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: AdminLogin) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/admin/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n\n      const result = await response.json();\n      localStorage.setItem(\"adminToken\", result.accessToken);\n      localStorage.setItem(\"adminUser\", JSON.stringify(result.admin));\n\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${result.admin.username}!`,\n      });\n\n      setLocation(\"/admin/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"flex justify-center mb-2\">\n            <div className=\"p-3 bg-primary/10 rounded-full\">\n              <ShieldCheck className=\"w-10 h-10 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Portal</CardTitle>\n          <CardDescription>Sign in to access the admin dashboard</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        disabled={isLoading}\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        disabled={isLoading}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-4 pt-4 border-t\">\n            <Button\n              onClick={async () => {\n                setIsLoading(true);\n                try {\n                  const response = await fetch(\"/api/admin/auth/test-login\", {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                  });\n\n                  if (!response.ok) {\n                    const error = await response.json();\n                    throw new Error(error.message || \"Test login failed\");\n                  }\n\n                  const result = await response.json();\n                  localStorage.setItem(\"adminToken\", result.accessToken);\n                  localStorage.setItem(\"adminUser\", JSON.stringify(result.admin));\n\n                  toast({\n                    title: \"Test login successful\",\n                    description: `Logged in as ${result.admin.username}`,\n                  });\n\n                  setLocation(\"/admin/dashboard\");\n                } catch (error) {\n                  toast({\n                    title: \"Test login failed\",\n                    description: error instanceof Error ? error.message : \"Failed to login\",\n                    variant: \"destructive\",\n                  });\n                } finally {\n                  setIsLoading(false);\n                }\n              }}\n              variant=\"outline\"\n              className=\"w-full\"\n              disabled={isLoading}\n            >\n              Test Login (Bypass Auth)\n            </Button>\n            <p className=\"text-xs text-center mt-2 text-slate-500\">\n              For testing only - uses default admin account\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6157},"client/src/components/admin/AdminGuard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\n\ninterface AdminGuardProps {\n  children: React.ReactNode;\n}\n\nexport function AdminGuard({ children }: AdminGuardProps) {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isLoading } = useAdminAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/admin/login\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-50 dark:bg-slate-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600 dark:text-slate-400\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":969},"client/src/pages/admin/AdminChefs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star } from \"lucide-react\";\nimport type { Chef } from \"@shared/schema\";\n\nexport default function AdminChefs() {\n  const { data: chefs, isLoading } = useQuery<Chef[]>({\n    queryKey: [\"/api/admin\", \"chefs\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/chefs\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch chefs\");\n      return response.json();\n    },\n  });\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Chefs & Restaurants</h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">View partner chefs and restaurants</p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"aspect-video bg-slate-200 dark:bg-slate-700\"></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : chefs && chefs.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {chefs.map((chef) => (\n              <Card key={chef.id} data-testid={`card-chef-${chef.id}`}>\n                <img src={chef.image} alt={chef.name} className=\"w-full aspect-video object-cover rounded-t-lg\" />\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-1 text-slate-900 dark:text-slate-100\">{chef.name}</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-2\">{chef.description}</p>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"font-medium text-slate-900 dark:text-slate-100\">{chef.rating}</span>\n                    </div>\n                    <span className=\"text-slate-500 dark:text-slate-400\">({chef.reviewCount} reviews)</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <p className=\"text-slate-600 dark:text-slate-400\">No chefs found</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":3049},"client/src/pages/admin/AdminUsers.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { User } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function AdminUsers() {\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin\", \"users\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/users\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Users</h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">View registered users</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Registered Users ({users?.length || 0})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-2\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-12 bg-slate-200 dark:bg-slate-700 rounded animate-pulse\"></div>\n                ))}\n              </div>\n            ) : users && users.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Joined</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users.map((user) => (\n                      <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-3\">\n                            {user.profileImageUrl && (\n                              <img\n                                src={user.profileImageUrl}\n                                alt={`${user.firstName} ${user.lastName}`}\n                                className=\"w-8 h-8 rounded-full\"\n                              />\n                            )}\n                            <span>{user.firstName} {user.lastName}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>{user.createdAt ? format(new Date(user.createdAt), \"PP\") : \"N/A\"}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <p className=\"text-center text-slate-600 dark:text-slate-400 py-8\">No users found</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":3203},"client/src/pages/admin/AdminOrders.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Order } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\nexport default function AdminOrders() {\n  const { toast } = useToast();\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin\", \"orders\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/orders\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch orders\");\n      return response.json();\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/orders/${orderId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update order status\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/metrics\"] });\n      toast({\n        title: \"Order updated\",\n        description: \"Order status has been updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update failed\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"confirmed\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"preparing\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"out_for_delivery\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"delivered\":\n      case \"completed\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"bg-slate-100 text-slate-800 dark:bg-slate-900 dark:text-slate-200\";\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Orders</h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Manage customer orders and update their status\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-6 bg-slate-200 dark:bg-slate-700 rounded w-48\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-full\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : orders && orders.length > 0 ? (\n          <div className=\"space-y-4\">\n            {orders.map((order) => (\n              <Card key={order.id} data-testid={`card-order-${order.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">Order #{order.id.slice(0, 8)}</CardTitle>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n                        {order.customerName} • {order.phone}\n                      </p>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                        {format(new Date(order.createdAt), \"PPp\")}\n                      </p>\n                    </div>\n                    <Badge className={getStatusColor(order.status)} data-testid={`badge-status-${order.id}`}>\n                      {order.status.replace(\"_\", \" \").toUpperCase()}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Delivery Address</p>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">{order.address}</p>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">Items</p>\n                    <div className=\"space-y-1\">\n                      {(order.items as any[]).map((item, idx) => (\n                        <div key={idx} className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-600 dark:text-slate-400\">\n                            {item.name} x {item.quantity}\n                          </span>\n                          <span className=\"text-slate-900 dark:text-slate-100 font-medium\">\n                            ₹{item.price * item.quantity}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-600 dark:text-slate-400\">Subtotal:</span>\n                          <span className=\"text-slate-900 dark:text-slate-100\">₹{order.subtotal}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-slate-600 dark:text-slate-400\">Delivery Fee:</span>\n                          <span className=\"text-slate-900 dark:text-slate-100\">₹{order.deliveryFee}</span>\n                        </div>\n                        <div className=\"flex justify-between font-bold\">\n                          <span>Total:</span>\n                          <span>₹{order.total}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2 items-center\">\n                      <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Update Status:</span>\n                      <Select\n                        value={order.status}\n                        onValueChange={(status) => updateStatusMutation.mutate({ orderId: order.id, status })}\n                        disabled={updateStatusMutation.isPending}\n                      >\n                        <SelectTrigger className=\"w-48\" data-testid={`select-status-${order.id}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                          <SelectItem value=\"preparing\">Preparing</SelectItem>\n                          <SelectItem value=\"out_for_delivery\">Out for Delivery</SelectItem>\n                          <SelectItem value=\"delivered\">Delivered</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <p className=\"text-slate-600 dark:text-slate-400\">No orders found</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":8761},"client/src/pages/admin/AdminProducts.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport type { Product, Category, InsertProduct } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema } from \"@shared/schema\";\n\nexport default function AdminProducts() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/admin\", \"products\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/products\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/admin\", \"categories\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/categories\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  const form = useForm<any>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      price: 0,\n      image: \"\",\n      categoryId: \"\",\n      isVeg: true,\n      isCustomizable: false,\n      chefId: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/products\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"products\"] });\n      toast({ title: \"Product created\", description: \"Product has been created successfully\" });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Creation failed\", description: \"Failed to create product\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/products/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"products\"] });\n      toast({ title: \"Product updated\", description: \"Product has been updated successfully\" });\n      setIsDialogOpen(false);\n      setEditingProduct(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/products/${id}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"products\"] });\n      toast({ title: \"Product deleted\", description: \"Product has been deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    form.reset(product);\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (data: any) => {\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Products</h1>\n            <p className=\"text-slate-600 dark:text-slate-400 mt-1\">Manage your food products</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={(open) => { setIsDialogOpen(open); if (!open) { setEditingProduct(null); form.reset(); } }}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-product\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>{editingProduct ? \"Edit Product\" : \"Add New Product\"}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter product name\" data-testid=\"input-product-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Enter product description\" data-testid=\"input-product-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price (₹)</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" placeholder=\"0\" onChange={(e) => field.onChange(parseInt(e.target.value))} data-testid=\"input-product-price\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories?.map((cat) => (\n                                <SelectItem key={cat.id} value={cat.id}>\n                                  {cat.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"image\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Image URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-product-image\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"isVeg\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center gap-2\">\n                          <FormLabel>Vegetarian</FormLabel>\n                          <FormControl>\n                            <Switch checked={field.value} onCheckedChange={field.onChange} data-testid=\"switch-product-veg\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"isCustomizable\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center gap-2\">\n                          <FormLabel>Customizable</FormLabel>\n                          <FormControl>\n                            <Switch checked={field.value} onCheckedChange={field.onChange} data-testid=\"switch-product-customizable\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <DialogFooter>\n                    <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-save-product\">\n                      {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : editingProduct ? \"Update\" : \"Create\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"aspect-video bg-slate-200 dark:bg-slate-700\"></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : products && products.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {products.map((product) => (\n              <Card key={product.id} data-testid={`card-product-${product.id}`}>\n                <img src={product.image} alt={product.name} className=\"w-full aspect-video object-cover rounded-t-lg\" />\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-1 text-slate-900 dark:text-slate-100\">{product.name}</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-2 line-clamp-2\">{product.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">₹{product.price}</span>\n                    <div className=\"flex gap-1\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(product)} data-testid={`button-edit-${product.id}`}>\n                        <Pencil className=\"w-4 h-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => deleteMutation.mutate(product.id)} data-testid={`button-delete-${product.id}`}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <p className=\"text-slate-600 dark:text-slate-400\">No products found</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":13786},"client/src/pages/admin/AdminCategories.tsx":{"content":"\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport type { Category, InsertCategory } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCategorySchema } from \"@shared/schema\";\n\nexport default function AdminCategories() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n\n  const { data: categories, isLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/admin\", \"categories\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/categories\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      image: \"\",\n      iconName: \"UtensilsCrossed\",\n      itemCount: \"0 items\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/categories\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"categories\"] });\n      toast({ title: \"Category created\", description: \"Category has been created successfully\" });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Creation failed\", description: \"Failed to create category\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertCategory }) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/categories/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"categories\"] });\n      toast({ title: \"Category updated\", description: \"Category has been updated successfully\" });\n      setIsDialogOpen(false);\n      setEditingCategory(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/categories/${id}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"categories\"] });\n      toast({ title: \"Category deleted\", description: \"Category has been deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    form.reset({\n      name: category.name,\n      description: category.description,\n      image: category.image,\n      iconName: category.iconName,\n      itemCount: category.itemCount,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (data: InsertCategory) => {\n    if (editingCategory) {\n      updateMutation.mutate({ id: editingCategory.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Categories</h1>\n            <p className=\"text-slate-600 dark:text-slate-400 mt-1\">Manage food categories</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={(open) => { setIsDialogOpen(open); if (!open) { setEditingCategory(null); form.reset(); } }}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-category\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Category\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>{editingCategory ? \"Edit Category\" : \"Add New Category\"}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter category name\" data-testid=\"input-category-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Enter category description\" data-testid=\"input-category-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"image\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Image URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-category-image\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"iconName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Icon Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"UtensilsCrossed, ChefHat, Hotel\" data-testid=\"input-category-icon\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"itemCount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Item Count</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"20+ items\" data-testid=\"input-category-count\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <DialogFooter>\n                    <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-save-category\">\n                      {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : editingCategory ? \"Update\" : \"Create\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"aspect-video bg-slate-200 dark:bg-slate-700\"></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : categories && categories.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {categories.map((category) => (\n              <Card key={category.id} data-testid={`card-category-${category.id}`}>\n                <img src={category.image} alt={category.name} className=\"w-full aspect-video object-cover rounded-t-lg\" />\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-1 text-slate-900 dark:text-slate-100\">{category.name}</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-2\">{category.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-slate-500 dark:text-slate-500\">{category.itemCount}</p>\n                    <div className=\"flex gap-1\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(category)} data-testid={`button-edit-${category.id}`}>\n                        <Pencil className=\"w-4 h-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => deleteMutation.mutate(category.id)} data-testid={`button-delete-${category.id}`}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <p className=\"text-slate-600 dark:text-slate-400\">No categories found</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":11394},"client/src/components/admin/AdminLayout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  LayoutDashboard,\n  ShoppingBag,\n  Package,\n  Users,\n  ChefHat,\n  LogOut,\n  Menu,\n  X,\n  ShieldCheck,\n  FolderKanban,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function AdminLayout({ children }: AdminLayoutProps) {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const adminUser = JSON.parse(localStorage.getItem(\"adminUser\") || \"{}\");\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/admin/auth/logout\", { method: \"POST\" });\n      localStorage.removeItem(\"adminToken\");\n      localStorage.removeItem(\"adminUser\");\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n      setLocation(\"/admin/login\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/admin/dashboard\", icon: LayoutDashboard },\n    { name: \"Orders\", href: \"/admin/orders\", icon: ShoppingBag },\n    { name: \"Products\", href: \"/admin/products\", icon: Package },\n    { name: \"Categories\", href: \"/admin/categories\", icon: FolderKanban },\n    { name: \"Chefs\", href: \"/admin/chefs\", icon: ChefHat },\n    { name: \"Users\", href: \"/admin/users\", icon: Users },\n  ];\n\n  if (adminUser.role === \"super_admin\") {\n    navigation.push({ name: \"Admin Management\", href: \"/admin/admins\", icon: ShieldCheck });\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <div className=\"lg:flex\">\n        <div\n          className={`fixed inset-0 z-40 lg:hidden ${isSidebarOpen ? \"block\" : \"hidden\"}`}\n          onClick={() => setIsSidebarOpen(false)}\n        >\n          <div className=\"absolute inset-0 bg-black/50\"></div>\n        </div>\n\n        <aside\n          className={`fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 transform transition-transform lg:translate-x-0 ${\n            isSidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n          }`}\n        >\n          <div className=\"flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center gap-2\">\n              <ShieldCheck className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-bold text-lg\">Admin Panel</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={() => setIsSidebarOpen(false)}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n            <div className=\"text-sm text-slate-600 dark:text-slate-400\">Logged in as</div>\n            <div className=\"font-semibold text-slate-900 dark:text-slate-100\">{adminUser.username}</div>\n            <div className=\"text-xs text-slate-500 dark:text-slate-400 capitalize\">{adminUser.role?.replace(\"_\", \" \")}</div>\n          </div>\n\n          <nav className=\"p-4 space-y-1\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <a\n                    className={`flex items-center gap-3 px-3 py-2 rounded-lg transition-colors ${\n                      isActive\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700\"\n                    }`}\n                    data-testid={`link-${item.name.toLowerCase().replace(\" \", \"-\")}`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.name}</span>\n                  </a>\n                </Link>\n              );\n            })}\n          </nav>\n\n          <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-slate-200 dark:border-slate-700\">\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"w-full justify-start gap-3\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n              <span>Logout</span>\n            </Button>\n          </div>\n        </aside>\n\n        <div className=\"flex-1 lg:pl-64\">\n          <header className=\"bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 sticky top-0 z-30\">\n            <div className=\"flex items-center justify-between p-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"lg:hidden\"\n                onClick={() => setIsSidebarOpen(true)}\n                data-testid=\"button-open-sidebar\"\n              >\n                <Menu className=\"w-6 h-6\" />\n              </Button>\n              <div className=\"text-lg font-semibold lg:block hidden\">FoodExpress Admin</div>\n              <div></div>\n            </div>\n          </header>\n\n          <main className=\"p-6\">{children}</main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5516},"client/src/pages/admin/AdminManagement.tsx":{"content":"\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { AdminUser, InsertAdminUser } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Plus, ShieldCheck } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAdminUserSchema } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function AdminManagement() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: admins, isLoading } = useQuery<AdminUser[]>({\n    queryKey: [\"/api/admin\", \"admins\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/admins\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch admins\");\n      return response.json();\n    },\n  });\n\n  const form = useForm<InsertAdminUser>({\n    resolver: zodResolver(insertAdminUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"viewer\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertAdminUser) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/admins\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create admin\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin\", \"admins\"] });\n      toast({ title: \"Admin created\", description: \"Admin user has been created successfully\" });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Creation failed\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (data: InsertAdminUser) => {\n    createMutation.mutate(data);\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"destructive\";\n      case \"manager\":\n        return \"default\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\">Admin Management</h1>\n            <p className=\"text-slate-600 dark:text-slate-400 mt-1\">Manage admin users and permissions</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-admin\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Admin User\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Admin User</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter username\" data-testid=\"input-admin-username\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" placeholder=\"Enter email\" data-testid=\"input-admin-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"password\" placeholder=\"Enter password (min 8 chars)\" data-testid=\"input-admin-password\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Role</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-admin-role\">\n                              <SelectValue placeholder=\"Select role\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"viewer\">Viewer</SelectItem>\n                            <SelectItem value=\"manager\">Manager</SelectItem>\n                            <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <DialogFooter>\n                    <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-save-admin\">\n                      {createMutation.isPending ? \"Creating...\" : \"Create Admin\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShieldCheck className=\"w-5 h-5\" />\n              Admin Users ({admins?.length || 0})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-2\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-12 bg-slate-200 dark:bg-slate-700 rounded animate-pulse\"></div>\n                ))}\n              </div>\n            ) : admins && admins.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Username</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Last Login</TableHead>\n                      <TableHead>Created</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {admins.map((admin) => (\n                      <TableRow key={admin.id} data-testid={`row-admin-${admin.id}`}>\n                        <TableCell className=\"font-medium\">{admin.username}</TableCell>\n                        <TableCell>{admin.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={getRoleBadgeVariant(admin.role)}>\n                            {admin.role.replace(\"_\", \" \").toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {admin.lastLoginAt ? format(new Date(admin.lastLoginAt), \"PP p\") : \"Never\"}\n                        </TableCell>\n                        <TableCell>{admin.createdAt ? format(new Date(admin.createdAt), \"PP\") : \"N/A\"}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <p className=\"text-center text-slate-600 dark:text-slate-400 py-8\">No admin users found</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":9600},"scripts/create-admin.ts":{"content":"import { storage } from \"../server/storage\";\nimport { hashPassword } from \"../server/adminAuth\";\n\nasync function createDefaultAdmin() {\n  const username = process.env.ADMIN_USERNAME || \"admin\";\n  const password = process.env.ADMIN_PASSWORD || \"admin123\";\n  const email = process.env.ADMIN_EMAIL || \"admin@foodexpress.com\";\n\n  try {\n    const existingAdmin = await storage.getAdminByUsername(username);\n    if (existingAdmin) {\n      console.log(\"Admin user already exists!\");\n      return;\n    }\n\n    const passwordHash = await hashPassword(password);\n    const admin = await storage.createAdmin({\n      username,\n      email,\n      role: \"super_admin\",\n      passwordHash,\n    });\n\n    console.log(\"Default admin user created successfully!\");\n    console.log(`Username: ${username}`);\n    console.log(`Password: ${password}`);\n    console.log(`Role: ${admin.role}`);\n    console.log(\"\\nPlease change the default password after first login.\");\n  } catch (error) {\n    console.error(\"Failed to create admin user:\", error);\n  }\n}\n\ncreateDefaultAdmin();\n","size_bytes":1051},"scripts/test-password.ts":{"content":"\nimport bcrypt from \"bcryptjs\";\n\nasync function testPassword() {\n  const password = \"admin123\";\n  const hash = await bcrypt.hash(password, 10);\n  console.log(\"Generated hash:\", hash);\n  \n  const isValid = await bcrypt.compare(password, hash);\n  console.log(\"Password verification:\", isValid);\n  \n  // Test with the actual admin password hash from database\n  const { storage } = await import(\"../server/storage\");\n  const admin = await storage.getAdminByUsername(\"admin\");\n  \n  if (admin) {\n    console.log(\"\\nAdmin found in database\");\n    console.log(\"Stored hash:\", admin.passwordHash);\n    const isStoredValid = await bcrypt.compare(password, admin.passwordHash);\n    console.log(\"Stored password verification:\", isStoredValid);\n  } else {\n    console.log(\"No admin found in database\");\n  }\n}\n\ntestPassword();\n","size_bytes":813},"client/src/pages/admin/AdminDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, ShoppingBag, DollarSign, Clock, CheckCircle } from \"lucide-react\";\n\ninterface DashboardMetrics {\n  userCount: number;\n  orderCount: number;\n  totalRevenue: number;\n  pendingOrders: number;\n  completedOrders: number;\n}\n\nexport default function AdminDashboard() {\n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/admin/dashboard/metrics\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(\"/api/admin/dashboard/metrics\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch metrics\");\n      return response.json();\n    },\n  });\n\n  const stats = [\n    {\n      title: \"Total Users\",\n      value: metrics?.userCount || 0,\n      icon: Users,\n      color: \"text-blue-600 dark:text-blue-400\",\n      bgColor: \"bg-blue-50 dark:bg-blue-950\",\n    },\n    {\n      title: \"Total Orders\",\n      value: metrics?.orderCount || 0,\n      icon: ShoppingBag,\n      color: \"text-purple-600 dark:text-purple-400\",\n      bgColor: \"bg-purple-50 dark:bg-purple-950\",\n    },\n    {\n      title: \"Total Revenue\",\n      value: `₹${metrics?.totalRevenue || 0}`,\n      icon: DollarSign,\n      color: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-50 dark:bg-green-950\",\n    },\n    {\n      title: \"Pending Orders\",\n      value: metrics?.pendingOrders || 0,\n      icon: Clock,\n      color: \"text-orange-600 dark:text-orange-400\",\n      bgColor: \"bg-orange-50 dark:bg-orange-950\",\n    },\n    {\n      title: \"Completed Orders\",\n      value: metrics?.completedOrders || 0,\n      icon: CheckCircle,\n      color: \"text-teal-600 dark:text-teal-400\",\n      bgColor: \"bg-teal-50 dark:bg-teal-950\",\n    },\n  ];\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-dashboard-title\">\n            Dashboard\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Overview of your food delivery platform\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader className=\"pb-2\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-24\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded w-16\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            {stats.map((stat) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={stat.title} data-testid={`card-metric-${stat.title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                      {stat.title}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${stat.bgColor}`}>\n                      <Icon className={`w-4 h-4 ${stat.color}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid={`text-${stat.title.toLowerCase().replace(/\\s+/g, \"-\")}-value`}>\n                      {stat.value}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome to the Admin Panel</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              Use the sidebar navigation to manage your food delivery platform. You can:\n            </p>\n            <ul className=\"list-disc list-inside mt-4 space-y-2 text-slate-700 dark:text-slate-300\">\n              <li>View and manage customer orders</li>\n              <li>Add, edit, and delete products</li>\n              <li>Manage food categories</li>\n              <li>View registered users</li>\n              <li>Manage chef/restaurant partnerships</li>\n              {metrics && (\n                <li className=\"font-semibold text-primary\">\n                  Monitor real-time metrics and analytics\n                </li>\n              )}\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":5082},"server/adminRoutes.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport {\n  hashPassword,\n  verifyPassword,\n  generateAccessToken,\n  generateRefreshToken,\n  requireAdmin,\n  requireSuperAdmin,\n  requireAdminOrManager,\n  verifyToken,\n  type AuthenticatedAdminRequest,\n} from \"./adminAuth\";\nimport { adminLoginSchema, insertAdminUserSchema, insertCategorySchema, insertProductSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\nexport function registerAdminRoutes(app: Express) {\n  // TEMPORARY TEST ENDPOINT - REMOVE IN PRODUCTION\n  app.post(\"/api/admin/auth/test-login\", async (req, res) => {\n    try {\n      const admin = await storage.getAdminByUsername(\"admin\");\n      \n      if (!admin) {\n        res.status(404).json({ message: \"Default admin not found. Run create-admin script first.\" });\n        return;\n      }\n\n      await storage.updateAdminLastLogin(admin.id);\n\n      const accessToken = generateAccessToken(admin);\n      const refreshToken = generateRefreshToken(admin);\n\n      res.cookie(\"refreshToken\", refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n      });\n\n      res.json({\n        accessToken,\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          role: admin.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Test login error:\", error);\n      res.status(500).json({ message: \"Test login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/auth/login\", async (req, res) => {\n    try {\n      const validation = adminLoginSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({ message: fromZodError(validation.error).toString() });\n        return;\n      }\n\n      const { username, password } = validation.data;\n      const admin = await storage.getAdminByUsername(username);\n\n      if (!admin) {\n        res.status(401).json({ message: \"Invalid credentials\" });\n        return;\n      }\n\n      const isPasswordValid = await verifyPassword(password, admin.passwordHash);\n      if (!isPasswordValid) {\n        res.status(401).json({ message: \"Invalid credentials\" });\n        return;\n      }\n\n      await storage.updateAdminLastLogin(admin.id);\n\n      const accessToken = generateAccessToken(admin);\n      const refreshToken = generateRefreshToken(admin);\n\n      res.cookie(\"refreshToken\", refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n      });\n\n      res.json({\n        accessToken,\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          role: admin.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/auth/logout\", (req, res) => {\n    res.clearCookie(\"refreshToken\");\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  app.post(\"/api/admin/auth/refresh\", async (req, res) => {\n    try {\n      const refreshToken = req.cookies.refreshToken;\n\n      if (!refreshToken) {\n        res.status(401).json({ message: \"No refresh token\" });\n        return;\n      }\n\n      const payload = verifyToken(refreshToken);\n      if (!payload) {\n        res.status(401).json({ message: \"Invalid refresh token\" });\n        return;\n      }\n\n      const admin = await storage.getAdminById(payload.adminId);\n      if (!admin) {\n        res.status(401).json({ message: \"Admin not found\" });\n        return;\n      }\n\n      const newAccessToken = generateAccessToken(admin);\n      const newRefreshToken = generateRefreshToken(admin);\n\n      res.cookie(\"refreshToken\", newRefreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n      });\n\n      res.json({\n        accessToken: newAccessToken,\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          role: admin.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Token refresh error:\", error);\n      res.status(401).json({ message: \"Token refresh failed\" });\n    }\n  });\n\n  app.get(\"/api/admin/dashboard/metrics\", requireAdmin(), async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Dashboard metrics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  app.get(\"/api/admin/orders\", requireAdmin(), async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.patch(\"/api/admin/orders/:id/status\", requireAdminOrManager(), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        res.status(400).json({ message: \"Status is required\" });\n        return;\n      }\n\n      const order = await storage.updateOrderStatus(id, status);\n      if (!order) {\n        res.status(404).json({ message: \"Order not found\" });\n        return;\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Update order status error:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  app.get(\"/api/admin/categories\", requireAdmin(), async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Get categories error:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/admin/categories\", requireAdminOrManager(), async (req, res) => {\n    try {\n      const validation = insertCategorySchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({ message: fromZodError(validation.error).toString() });\n        return;\n      }\n\n      const category = await storage.createCategory(validation.data);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Create category error:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.patch(\"/api/admin/categories/:id\", requireAdminOrManager(), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const category = await storage.updateCategory(id, req.body);\n      \n      if (!category) {\n        res.status(404).json({ message: \"Category not found\" });\n        return;\n      }\n\n      res.json(category);\n    } catch (error) {\n      console.error(\"Update category error:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:id\", requireSuperAdmin(), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteCategory(id);\n      \n      if (!deleted) {\n        res.status(404).json({ message: \"Category not found\" });\n        return;\n      }\n\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  app.get(\"/api/admin/products\", requireAdmin(), async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Get products error:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/admin/products\", requireAdminOrManager(), async (req, res) => {\n    try {\n      const validation = insertProductSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({ message: fromZodError(validation.error).toString() });\n        return;\n      }\n\n      const product = await storage.createProduct(validation.data);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Create product error:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.patch(\"/api/admin/products/:id\", requireAdminOrManager(), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.updateProduct(id, req.body);\n      \n      if (!product) {\n        res.status(404).json({ message: \"Product not found\" });\n        return;\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Update product error:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", requireSuperAdmin(), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteProduct(id);\n      \n      if (!deleted) {\n        res.status(404).json({ message: \"Product not found\" });\n        return;\n      }\n\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete product error:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", requireAdmin(), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/admins\", requireSuperAdmin(), async (req, res) => {\n    try {\n      const admins = await storage.getAllAdmins();\n      const sanitized = admins.map((admin) => ({\n        id: admin.id,\n        username: admin.username,\n        email: admin.email,\n        role: admin.role,\n        lastLoginAt: admin.lastLoginAt,\n        createdAt: admin.createdAt,\n      }));\n      res.json(sanitized);\n    } catch (error) {\n      console.error(\"Get admins error:\", error);\n      res.status(500).json({ message: \"Failed to fetch admins\" });\n    }\n  });\n\n  app.post(\"/api/admin/admins\", requireSuperAdmin(), async (req, res) => {\n    try {\n      const validation = insertAdminUserSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({ message: fromZodError(validation.error).toString() });\n        return;\n      }\n\n      const existingAdmin = await storage.getAdminByUsername(validation.data.username);\n      if (existingAdmin) {\n        res.status(409).json({ message: \"Username already exists\" });\n        return;\n      }\n\n      const passwordHash = await hashPassword(validation.data.password);\n      const admin = await storage.createAdmin({\n        ...validation.data,\n        passwordHash,\n      });\n\n      res.status(201).json({\n        id: admin.id,\n        username: admin.username,\n        email: admin.email,\n        role: admin.role,\n        createdAt: admin.createdAt,\n      });\n    } catch (error) {\n      console.error(\"Create admin error:\", error);\n      res.status(500).json({ message: \"Failed to create admin\" });\n    }\n  });\n\n  app.get(\"/api/admin/chefs\", requireAdmin(), async (req, res) => {\n    try {\n      const chefs = await storage.getChefs();\n      res.json(chefs);\n    } catch (error) {\n      console.error(\"Get chefs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch chefs\" });\n    }\n  });\n}\n","size_bytes":11690}},"version":2}